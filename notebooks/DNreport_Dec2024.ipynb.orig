{
 "cells": [
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 2,
=======
   "execution_count": 1,
>>>>>>> refs/remotes/origin/main
   "id": "78d3c569-2097-4380-afeb-601644186a8f",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Define subject information\n",
    "\n",
    "subjectid=\"MIND006\""
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 3,
   "id": "4913fcbe-47ff-43e0-a39b-0e73567de9fb",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
=======
   "execution_count": 2,
   "id": "4913fcbe-47ff-43e0-a39b-0e73567de9fb",
   "metadata": {},
>>>>>>> refs/remotes/origin/main
   "outputs": [],
   "source": [
    "import os\n",
    "# Set creds\n",
<<<<<<< HEAD
    "os.environ['LAMP_ACCESS_KEY'] = os.getenv('LAMPACCESSKEY')\n",
    "os.environ['LAMP_SECRET_KEY'] = os.getenv('LAMPSERVERKEY')\n",
    "os.environ['LAMP_SERVER_ADDRESS'] = 'api.lamp.digital'\n",
    "\n",
    "# Define REDCap API details\n",
    "api_url = \"https://redcap.ucdenver.edu/api/\"\n",
    "api_token = os.getenv('REDCAPAPI')"
=======
    "#os.environ['LAMP_ACCESS_KEY'] = os.getenv('LAMPACCESSKEY')\n",
    "#os.environ['LAMP_SECRET_KEY'] = os.getenv('LAMPSERVERKEY')\n",
    "#os.environ['LAMP_SERVER_ADDRESS'] = 'api.lamp.digital'\n",
    "\n",
    "# Define REDCap API details\n",
    "#api_url = \"https://redcap.ucdenver.edu/api/\"\n",
    "#api_token = os.getenv('REDCAPAPI')\n",
    "\n",
    "# Set creds\n",
    "os.environ['LAMP_ACCESS_KEY'] = \"coloradoteam\"\n",
    "os.environ['LAMP_SECRET_KEY'] = \"coloradoteam\"\n",
    "os.environ['LAMP_SERVER_ADDRESS'] = 'api.lamp.digital'\n",
    "\n",
    "\n",
    "# Define REDCap API details\n",
    "api_url = \"https://redcap.ucdenver.edu/api/\"\n",
    "api_token = \"747CAA043278043EC91C0158DA644CD8\"\n"
>>>>>>> refs/remotes/origin/main
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 4,
=======
   "execution_count": 3,
>>>>>>> refs/remotes/origin/main
   "id": "28a734f7-4908-4b30-8826-d22d3fd41d18",
   "metadata": {},
   "outputs": [],
   "source": [
    "%%capture\n",
    "%pip install -q calplot\n",
    "%pip install -q plotly"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 5,
=======
   "execution_count": 4,
>>>>>>> refs/remotes/origin/main
   "id": "7b3470c1",
   "metadata": {},
   "outputs": [],
   "source": [
    "# install and import relevant packages and launch LAMP\n",
    "\n",
    "import plotly.io as pio\n",
    "pio.renderers.default = \"notebook_connected\"\n",
    "import requests\n",
    "import sys\n",
    "import datetime\n",
    "from datetime import datetime, timezone\n",
    "import time\n",
    "import pytz\n",
    "import calplot\n",
    "import pandas as pd\n",
    "\n",
    "from matplotlib.patches import Patch\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "from scipy.stats import ttest_ind, pearsonr\n",
    "\n",
    "import LAMP\n",
    "LAMP.connect()\n",
    "\n",
    "import cortex\n",
    "import numpy as np\n",
    "import altair as alt\n",
    "\n",
    "import matplotlib\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import warnings\n",
    "warnings.filterwarnings('ignore')\n",
    "import logging\n",
    "logger = logging.getLogger()\n",
    "logger.setLevel(logging.CRITICAL)\n",
    "logging.basicConfig(level=3)\n",
    "logging.getLogger('matplotlib').disabled = True\n",
    "logging.getLogger('matplotlib.font_manager').disabled = True\n",
    "logging.getLogger('matplotlib.pyplot').disabled = True\n",
    "logging.getLogger('shapely.geos').disabled = True\n",
    "logging.getLogger('numexpr.utils').disabled = True\n",
    "logging.getLogger('feature_types:_wrapper2').disabled = True\n",
    "\n",
    "from IPython.display import display, Markdown\n",
    "import plotly.graph_objects as go\n",
    "import plotly.offline as pyo\n",
    "\n",
    "MS_IN_DAY = 24 * 3600 * 1000\n",
    "\n",
    "pd.set_option('display.max_rows', None)\n",
    "pd.set_option('display.max_columns', None)\n",
    "pd.set_option('display.max_colwidth', None)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4924fe79-9625-4995-91ec-7ffbff9ab4ea",
   "metadata": {},
   "source": [
    "# Digital Clinic Handout"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0bc87b5b-6439-4c9f-8e8c-b28fff6cf165",
   "metadata": {},
   "source": [
    "This document presents the data that was collected during your time in the mindLAMP Study.  Feel free to reach out to the study team (digitalclinic@cuanschutz.edu) with any questions.\n"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 6,
=======
   "execution_count": 5,
>>>>>>> refs/remotes/origin/main
   "id": "ec6b94e3",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/markdown": [
       "<div style=\"margin-left: 30px;\"><font size=\"4\"><strong>Participant: MIND006<br/>Age: 90<br/>Gender: Woman<br/>Race: White</strong><br/><strong>Start Date: 2024-11-09</font></div>"
      ],
      "text/plain": [
       "<IPython.core.display.Markdown object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Function to fetch data from REDCap\n",
    "def fetch_redcap_data(record_id, event, fields):\n",
    "    payload = {\n",
    "        'token': api_token,\n",
    "        'content': 'record',\n",
    "        'format': 'json',\n",
    "        'records[0]': record_id,\n",
    "        'events[0]': event,\n",
    "        'type': 'flat',\n",
    "        'rawOrLabel': 'label'\n",
    "    }\n",
    "    \n",
    "    # Add multiple fields to the payload\n",
    "    for i, field in enumerate(fields):\n",
    "        payload[f'fields[{i}]'] = field\n",
    "    \n",
    "    response = requests.post(api_url, data=payload)\n",
    "    \n",
    "    if response.status_code == 200:\n",
    "        data = response.json()\n",
    "        return data\n",
    "    else:\n",
    "        print(f\"Error: {response.status_code} - {response.text}\")\n",
    "        return None\n",
    "\n",
    "# Fetch the gender, age, and race fields for record in intake_arm_2\n",
    "record_id = subjectid\n",
    "intake_event = \"intake_arm_2\"\n",
    "intake_fields = [\"gender\", \"age\", \"race\",\"eligibility_date\"]\n",
    "control_panel_event = \"control_panel_arm_2\"\n",
    "control_panel_fields = [\"mindlamp_userid\"]\n",
    "\n",
    "intake_data = fetch_redcap_data(record_id, intake_event, intake_fields)\n",
    "\n",
    "control_panel_data = fetch_redcap_data(record_id, control_panel_event, control_panel_fields)\n",
    "\n",
    "if control_panel_data:\n",
    "    part = control_panel_data[0].get(\"mindlamp_userid\", \"N/A\")\n",
    "\n",
    "# Extract age, gender, and race\n",
    "if intake_data:\n",
    "    subject = f'Participant: {subjectid}'\n",
    "    age = f'Age: {intake_data[0].get(\"age\", \"N/A\")}'\n",
    "    gender = f'Gender: {intake_data[0].get(\"gender\", \"N/A\")}'\n",
    "    race = f'Race: {intake_data[0].get(\"race\", \"N/A\")}'\n",
    "    start = intake_data[0].get(\"eligibility_date\", \"N/A\")\n",
    "    starttxt = f'Start Date: {start}'\n",
    "\n",
    "    # Display the information with font size 4 and indentation\n",
    "    display(Markdown(f'<div style=\"margin-left: 30px;\"><font size=\"4\"><strong>{subject}<br/>{age}<br/>{gender}<br/>{race}</strong><br/><strong>{starttxt}</font></div>'))"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 7,
=======
   "execution_count": 6,
>>>>>>> refs/remotes/origin/main
   "id": "67d12514-b18c-411a-b3f5-749954c07e00",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Settings for Cortex\n",
    "\n",
    "run_sleep=True\n",
    "# default end date is now\n",
    "end_date = cortex.now()\n",
    "\n",
    "\n",
    "def timestamp(dt):\n",
    "    local = pytz.timezone(\"America/New_York\")\n",
    "    date = datetime.strptime(dt, '%Y-%m-%d')\n",
    "    local_dt = local.localize(date, is_dst=None)\n",
    "    utc_dt = local_dt.astimezone(pytz.utc)\n",
    "    utc_dt.replace(tzinfo=timezone.utc).timestamp() * 1000\n",
    "    return int(utc_dt.replace(tzinfo=timezone.utc).timestamp() * 1000)\n",
    "start_date = timestamp(start)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f6b2aea9-2449-44ff-8095-975f00d48d80",
   "metadata": {},
   "source": [
    "# Acitivity and Data Quality"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9e28401b-6660-4b8f-bfa2-bd37b151bb15",
   "metadata": {},
   "source": [
    "Each week we will provide you with an estimate as to the quality of data we are receiving from the app.  The higher the data quality, the better we'll be able to tell you about your day to day activities."
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 8,
=======
   "execution_count": 7,
>>>>>>> refs/remotes/origin/main
   "id": "57e42bf6-4c33-4490-9fac-8fddedf22537",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "        <script type=\"text/javascript\">\n",
       "        window.PlotlyConfig = {MathJaxConfig: 'local'};\n",
       "        if (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}\n",
       "        if (typeof require !== 'undefined') {\n",
       "        require.undef(\"plotly\");\n",
       "        requirejs.config({\n",
       "            paths: {\n",
       "                'plotly': ['https://cdn.plot.ly/plotly-2.35.2.min']\n",
       "            }\n",
       "        });\n",
       "        require(['plotly'], function(Plotly) {\n",
       "            window._Plotly = Plotly;\n",
       "        });\n",
       "        }\n",
       "        </script>\n",
       "        "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
<<<<<<< HEAD
       "<div>                            <div id=\"c84ce0d3-bdad-4f90-85db-e0b3a4ed00aa\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                require([\"plotly\"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"c84ce0d3-bdad-4f90-85db-e0b3a4ed00aa\")) {                    Plotly.newPlot(                        \"c84ce0d3-bdad-4f90-85db-e0b3a4ed00aa\",                        [{\"delta\":{\"reference\":0.44},\"domain\":{\"x\":[0,1],\"y\":[0,1]},\"gauge\":{\"axis\":{\"range\":[null,1]},\"bar\":{\"color\":\"black\",\"line\":{\"color\":\"red\",\"width\":0},\"thickness\":0.1},\"shape\":\"angular\",\"steps\":[{\"color\":\"#E74C3C\",\"range\":[0,0.35]},{\"color\":\"#F4D03F\",\"range\":[0.35,0.6]},{\"color\":\"#27AE60\",\"range\":[0.6,0.8]},{\"color\":\"#2471A3\",\"range\":[0.8,1]}]},\"mode\":\"gauge+number\",\"title\":{\"text\":\"Average Data Quality in the Past Week\"},\"value\":0.7020998677248677,\"type\":\"indicator\"}],                        {\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"type\":\"scattergl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"bgcolor\":\"#E5ECF6\",\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"#E5ECF6\",\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"subunitcolor\":\"white\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"white\"},\"title\":{\"x\":0.05},\"mapbox\":{\"style\":\"light\"}}}},                        {\"responsive\": true}                    ).then(function(){\n",
       "                            \n",
       "var gd = document.getElementById('c84ce0d3-bdad-4f90-85db-e0b3a4ed00aa');\n",
=======
       "<div>                            <div id=\"88643ca1-92ee-4fe2-8abb-d5fcecd4fc4e\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                require([\"plotly\"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"88643ca1-92ee-4fe2-8abb-d5fcecd4fc4e\")) {                    Plotly.newPlot(                        \"88643ca1-92ee-4fe2-8abb-d5fcecd4fc4e\",                        [{\"delta\":{\"reference\":0.44},\"domain\":{\"x\":[0,1],\"y\":[0,1]},\"gauge\":{\"axis\":{\"range\":[null,1]},\"bar\":{\"color\":\"black\",\"line\":{\"color\":\"red\",\"width\":0},\"thickness\":0.1},\"shape\":\"angular\",\"steps\":[{\"color\":\"#E74C3C\",\"range\":[0,0.35]},{\"color\":\"#F4D03F\",\"range\":[0.35,0.6]},{\"color\":\"#27AE60\",\"range\":[0.6,0.8]},{\"color\":\"#2471A3\",\"range\":[0.8,1]}]},\"mode\":\"gauge+number\",\"title\":{\"text\":\"Average Data Quality in the Past Week\"},\"value\":0.7020998677248677,\"type\":\"indicator\"}],                        {\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"type\":\"scattergl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"bgcolor\":\"#E5ECF6\",\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"#E5ECF6\",\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"subunitcolor\":\"white\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"white\"},\"title\":{\"x\":0.05},\"mapbox\":{\"style\":\"light\"}}}},                        {\"responsive\": true}                    ).then(function(){\n",
       "                            \n",
       "var gd = document.getElementById('88643ca1-92ee-4fe2-8abb-d5fcecd4fc4e');\n",
>>>>>>> refs/remotes/origin/main
       "var x = new MutationObserver(function (mutations, observer) {{\n",
       "        var display = window.getComputedStyle(gd).display;\n",
       "        if (!display || display === 'none') {{\n",
       "            console.log([gd, 'removed!']);\n",
       "            Plotly.purge(gd);\n",
       "            observer.disconnect();\n",
       "        }}\n",
       "}});\n",
       "\n",
       "// Listen for the removal of the full notebook cells\n",
       "var notebookContainer = gd.closest('#notebook-container');\n",
       "if (notebookContainer) {{\n",
       "    x.observe(notebookContainer, {childList: true});\n",
       "}}\n",
       "\n",
       "// Listen for the clearing of the current output cell\n",
       "var outputEl = gd.closest('.output');\n",
       "if (outputEl) {{\n",
       "    x.observe(outputEl, {childList: true});\n",
       "}}\n",
       "\n",
       "                        })                };                });            </script>        </div>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "data_qual=cortex.secondary.data_quality.data_quality(id=part, start=cortex.now()-7*MS_IN_DAY, \n",
    "                                                     end=cortex.now(), resolution=86400000, \n",
    "                                                     feature='accelerometer', bin_size=10000)['data']\n",
    "#dq of the last week~! \n",
    "import plotly.graph_objects as go\n",
    "last_week=data_qual[-7:]\n",
    "dq=[day['value'] for day in last_week]\n",
    "avg_dq=sum(dq)/7\n",
    "fig = go.Figure(go.Indicator(\n",
    "    domain = {'x': [0, 1], 'y': [0, 1]},\n",
    "    value = avg_dq,\n",
    "    # mode = \"gauge+number+delta\",\n",
    "    mode='gauge+number',\n",
    "    title = {'text': \"Average Data Quality in the Past Week\"},\n",
    "    delta = {'reference': .44},\n",
    "    gauge = {'axis': {'range': [None, 1]},\n",
    "             'bar': {'color': \"black\", 'line': {'color':'red', 'width':0}, 'thickness': .1},\n",
    "             'shape': 'angular',\n",
    "             'steps' : [\n",
    "                 {'range': [0, .35], 'color': \"#E74C3C\"},\n",
    "                 {'range': [.35, .6], 'color': \"#F4D03F\"},\n",
    "                 {'range': [.6, .8], 'color': \"#27AE60\"},\n",
    "                 {'range': [.8, 1], 'color': \"#2471A3\"}]}))\n",
    "\n",
    "fig.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ac497daf-8d68-4560-b9ec-513e840a78dd",
   "metadata": {},
   "source": [
    "The graph below shows all the activities that you completed within the app each day. Dates are along the x-axis, while the y-axis shows how many activities you completed that day.  The colors on the bars designate the activity names."
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 9,
=======
   "execution_count": 8,
>>>>>>> refs/remotes/origin/main
   "id": "59de6937-682a-4770-9a1b-be33155e7edb",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Pulling data from LAMP server for all participants...\n",
      "Finished pulling data. Generating graphs...\n",
      "U1918167344 data:\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "\n",
<<<<<<< HEAD
       "<div id=\"altair-viz-45d6e7914e7340c9a272554afc6cea03\"></div>\n",
=======
       "<div id=\"altair-viz-853c6dc608d947798138f151cf466ba6\"></div>\n",
>>>>>>> refs/remotes/origin/main
       "<script type=\"text/javascript\">\n",
       "  var VEGA_DEBUG = (typeof VEGA_DEBUG == \"undefined\") ? {} : VEGA_DEBUG;\n",
       "  (function(spec, embedOpt){\n",
       "    let outputDiv = document.currentScript.previousElementSibling;\n",
<<<<<<< HEAD
       "    if (outputDiv.id !== \"altair-viz-45d6e7914e7340c9a272554afc6cea03\") {\n",
       "      outputDiv = document.getElementById(\"altair-viz-45d6e7914e7340c9a272554afc6cea03\");\n",
=======
       "    if (outputDiv.id !== \"altair-viz-853c6dc608d947798138f151cf466ba6\") {\n",
       "      outputDiv = document.getElementById(\"altair-viz-853c6dc608d947798138f151cf466ba6\");\n",
>>>>>>> refs/remotes/origin/main
       "    }\n",
       "    const paths = {\n",
       "      \"vega\": \"https://cdn.jsdelivr.net/npm//vega@5?noext\",\n",
       "      \"vega-lib\": \"https://cdn.jsdelivr.net/npm//vega-lib?noext\",\n",
       "      \"vega-lite\": \"https://cdn.jsdelivr.net/npm//vega-lite@4.17.0?noext\",\n",
       "      \"vega-embed\": \"https://cdn.jsdelivr.net/npm//vega-embed@6?noext\",\n",
       "    };\n",
       "\n",
       "    function maybeLoadScript(lib, version) {\n",
       "      var key = `${lib.replace(\"-\", \"\")}_version`;\n",
       "      return (VEGA_DEBUG[key] == version) ?\n",
       "        Promise.resolve(paths[lib]) :\n",
       "        new Promise(function(resolve, reject) {\n",
       "          var s = document.createElement('script');\n",
       "          document.getElementsByTagName(\"head\")[0].appendChild(s);\n",
       "          s.async = true;\n",
       "          s.onload = () => {\n",
       "            VEGA_DEBUG[key] = version;\n",
       "            return resolve(paths[lib]);\n",
       "          };\n",
       "          s.onerror = () => reject(`Error loading script: ${paths[lib]}`);\n",
       "          s.src = paths[lib];\n",
       "        });\n",
       "    }\n",
       "\n",
       "    function showError(err) {\n",
       "      outputDiv.innerHTML = `<div class=\"error\" style=\"color:red;\">${err}</div>`;\n",
       "      throw err;\n",
       "    }\n",
       "\n",
       "    function displayChart(vegaEmbed) {\n",
       "      vegaEmbed(outputDiv, spec, embedOpt)\n",
       "        .catch(err => showError(`Javascript Error: ${err.message}<br>This usually means there's a typo in your chart specification. See the javascript console for the full traceback.`));\n",
       "    }\n",
       "\n",
       "    if(typeof define === \"function\" && define.amd) {\n",
       "      requirejs.config({paths});\n",
       "      require([\"vega-embed\"], displayChart, err => showError(`Error loading script: ${err.message}`));\n",
       "    } else {\n",
       "      maybeLoadScript(\"vega\", \"5\")\n",
       "        .then(() => maybeLoadScript(\"vega-lite\", \"4.17.0\"))\n",
       "        .then(() => maybeLoadScript(\"vega-embed\", \"6\"))\n",
       "        .catch(showError)\n",
       "        .then(() => displayChart(vegaEmbed));\n",
       "    }\n",
       "  })({\"config\": {\"view\": {\"continuousWidth\": 400, \"continuousHeight\": 300}}, \"layer\": [{\"mark\": \"bar\", \"encoding\": {\"color\": {\"field\": \"activity\", \"type\": \"nominal\"}, \"order\": {\"field\": \"activity\", \"sort\": \"ascending\", \"type\": \"nominal\"}, \"tooltip\": [{\"field\": \"activity\", \"title\": \"Activity Name\", \"type\": \"nominal\"}, {\"field\": \"count\", \"title\": \"Times Completed\", \"type\": \"quantitative\"}, {\"field\": \"timestamp\", \"title\": \"Date\", \"type\": \"temporal\"}], \"x\": {\"field\": \"timestamp\", \"title\": \"Date\", \"type\": \"temporal\"}, \"y\": {\"field\": \"count\", \"stack\": \"zero\", \"title\": \"Activity Breakdown\", \"type\": \"quantitative\"}}}, {\"mark\": {\"type\": \"text\", \"angle\": 270, \"color\": \"white\", \"dx\": -5, \"dy\": 0}, \"encoding\": {\"order\": {\"field\": \"activity\", \"sort\": \"ascending\", \"type\": \"nominal\"}, \"text\": {\"field\": \"text_output\", \"type\": \"nominal\"}, \"tooltip\": [{\"field\": \"activity\", \"title\": \"Activity Name\", \"type\": \"nominal\"}, {\"field\": \"count\", \"title\": \"Times Completed\", \"type\": \"quantitative\"}, {\"field\": \"timestamp\", \"title\": \"Date\", \"type\": \"temporal\"}], \"x\": {\"field\": \"timestamp\", \"type\": \"temporal\"}, \"y\": {\"field\": \"count\", \"stack\": \"zero\", \"type\": \"quantitative\"}}, \"transform\": [{\"calculate\": \"datum.count\", \"as\": \"text_output\"}]}], \"data\": {\"name\": \"data-9341b57f21e7aa2579ba61c6dcafc94a\"}, \"$schema\": \"https://vega.github.io/schema/vega-lite/v4.17.0.json\", \"datasets\": {\"data-9341b57f21e7aa2579ba61c6dcafc94a\": [{\"timestamp\": \"2024-09-27T00:00:00\", \"id\": \"32yvhaw6sxvp0p3e1ja8\", \"activity\": \"All Daily Surveys\", \"count\": 1, \"activity_subname\": \"All\"}, {\"timestamp\": \"2024-09-30T00:00:00\", \"id\": \"32yvhaw6sxvp0p3e1ja8\", \"activity\": \"All Daily Surveys\", \"count\": 1, \"activity_subname\": \"All\"}, {\"timestamp\": \"2024-10-02T00:00:00\", \"id\": \"32yvhaw6sxvp0p3e1ja8\", \"activity\": \"All Daily Surveys\", \"count\": 1, \"activity_subname\": \"All\"}, {\"timestamp\": \"2024-10-02T00:00:00\", \"id\": \"r5w54b4615ehefg8gx8m\", \"activity\": \"Weekly Depression Survey\", \"count\": 1, \"activity_subname\": \"Wkl\"}, {\"timestamp\": \"2024-10-02T00:00:00\", \"id\": \"8q9vsg3b1kysxzgchyz8\", \"activity\": \"Weekly Anxiety Survey\", \"count\": 1, \"activity_subname\": \"Wkl\"}, {\"timestamp\": \"2024-10-02T00:00:00\", \"id\": \"2wgbhfmm2r9q4ee70195\", \"activity\": \"5-4-3-2-1 Grounding Technique (2:30min)\", \"count\": 2, \"activity_subname\": \"5-4\"}, {\"timestamp\": \"2024-10-03T00:00:00\", \"id\": \"cfr7dh4dhnya3jh4ah38\", \"activity\": \"Depression Survey\", \"count\": 2, \"activity_subname\": \"Dpr\"}, {\"timestamp\": \"2024-10-03T00:00:00\", \"id\": \"cbjtsarn1rwsmxawcagr\", \"activity\": \"Anxiety Survey\", \"count\": 2, \"activity_subname\": \"Anx\"}, {\"timestamp\": \"2024-10-03T00:00:00\", \"id\": \"h2k6xzny9dheefhxsrfb\", \"activity\": \"Functioning Survey\", \"count\": 2, \"activity_subname\": \"Fnc\"}, {\"timestamp\": \"2024-10-03T00:00:00\", \"id\": \"s85t3r642z2nkx4xds8g\", \"activity\": \"Stress Survey\", \"count\": 2, \"activity_subname\": \"Str\"}, {\"timestamp\": \"2024-10-03T00:00:00\", \"id\": \"3f6k4yrtr28dxfxmcp0x\", \"activity\": \"Emotional Self Awareness Survey\", \"count\": 1, \"activity_subname\": \"Emt\"}, {\"timestamp\": \"2024-10-03T00:00:00\", \"id\": \"d3vt02pc8fa9fz4jf7en\", \"activity\": \"Social Support Survey\", \"count\": 1, \"activity_subname\": \"Scl\"}, {\"timestamp\": \"2024-10-03T00:00:00\", \"id\": \"s975xehd3g45cyr9n7jt\", \"activity\": \"Flourishing Survey\", \"count\": 1, \"activity_subname\": \"Flr\"}, {\"timestamp\": \"2024-10-03T00:00:00\", \"id\": \"76yh2rhvxqd12rqsemge\", \"activity\": \"Self Efficacy Survey\", \"count\": 1, \"activity_subname\": \"Slf\"}, {\"timestamp\": \"2024-10-03T00:00:00\", \"id\": \"ckhryg5500g12f2rp5fc\", \"activity\": \"Motivation Survey\", \"count\": 1, \"activity_subname\": \"Mtv\"}, {\"timestamp\": \"2024-10-03T00:00:00\", \"id\": \"9gf62qv3zxgpj7y03zqw\", \"activity\": \"Digital Literacy Survey\", \"count\": 1, \"activity_subname\": \"Dgt\"}, {\"timestamp\": \"2024-10-04T00:00:00\", \"id\": \"cfr7dh4dhnya3jh4ah38\", \"activity\": \"Depression Survey\", \"count\": 1, \"activity_subname\": \"Dpr\"}, {\"timestamp\": \"2024-10-09T00:00:00\", \"id\": \"2wgbhfmm2r9q4ee70195\", \"activity\": \"5-4-3-2-1 Grounding Technique (2:30min)\", \"count\": 1, \"activity_subname\": \"5-4\"}, {\"timestamp\": \"2024-10-30T00:00:00\", \"id\": \"8q9vsg3b1kysxzgchyz8\", \"activity\": \"Weekly Anxiety Survey\", \"count\": 1, \"activity_subname\": \"Wkl\"}, {\"timestamp\": \"2024-10-30T00:00:00\", \"id\": \"j1ghyarwmzsxktby3g6s\", \"activity\": \"Self-Monitoring 1\", \"count\": 1, \"activity_subname\": \"Slf\"}, {\"timestamp\": \"2024-11-01T00:00:00\", \"id\": \"d3vt02pc8fa9fz4jf7en\", \"activity\": \"Social Support Survey\", \"count\": 1, \"activity_subname\": \"Scl\"}, {\"timestamp\": \"2024-11-01T00:00:00\", \"id\": \"63jpgd665wg5whqvpzp1\", \"activity\": \"Daily Sleep Survey\", \"count\": 1, \"activity_subname\": \"Dly\"}, {\"timestamp\": \"2024-11-01T00:00:00\", \"id\": \"32yvhaw6sxvp0p3e1ja8\", \"activity\": \"All Daily Surveys\", \"count\": 3, \"activity_subname\": \"All\"}, {\"timestamp\": \"2024-11-01T00:00:00\", \"id\": \"r5w54b4615ehefg8gx8m\", \"activity\": \"Weekly Depression Survey\", \"count\": 3, \"activity_subname\": \"Wkl\"}, {\"timestamp\": \"2024-11-01T00:00:00\", \"id\": \"8q9vsg3b1kysxzgchyz8\", \"activity\": \"Weekly Anxiety Survey\", \"count\": 3, \"activity_subname\": \"Wkl\"}, {\"timestamp\": \"2024-11-01T00:00:00\", \"id\": \"2n0qefc74kep8w05qpax\", \"activity\": \"Weekly Sleep Survey\", \"count\": 3, \"activity_subname\": \"Wkl\"}, {\"timestamp\": \"2024-11-01T00:00:00\", \"id\": \"7fa3k23waas1xyxwygnb\", \"activity\": \"Weekly App Satisfaction Survey\", \"count\": 2, \"activity_subname\": \"Wkl\"}, {\"timestamp\": \"2024-11-01T00:00:00\", \"id\": \"66ndemt77vtg1fmvs778\", \"activity\": \"Weekly Therapist Alliance Survey\", \"count\": 1, \"activity_subname\": \"Wkl\"}, {\"timestamp\": \"2024-11-04T00:00:00\", \"id\": \"2wgbhfmm2r9q4ee70195\", \"activity\": \"5-4-3-2-1 Grounding Technique (2:30min)\", \"count\": 1, \"activity_subname\": \"5-4\"}, {\"timestamp\": \"2024-11-04T00:00:00\", \"id\": \"8q9vsg3b1kysxzgchyz8\", \"activity\": \"Weekly Anxiety Survey\", \"count\": 1, \"activity_subname\": \"Wkl\"}, {\"timestamp\": \"2024-11-04T00:00:00\", \"id\": \"7fa3k23waas1xyxwygnb\", \"activity\": \"Weekly App Satisfaction Survey\", \"count\": 1, \"activity_subname\": \"Wkl\"}, {\"timestamp\": \"2024-11-04T00:00:00\", \"id\": \"2n0qefc74kep8w05qpax\", \"activity\": \"Weekly Sleep Survey\", \"count\": 1, \"activity_subname\": \"Wkl\"}, {\"timestamp\": \"2024-11-04T00:00:00\", \"id\": \"r5w54b4615ehefg8gx8m\", \"activity\": \"Weekly Depression Survey\", \"count\": 1, \"activity_subname\": \"Wkl\"}, {\"timestamp\": \"2024-11-04T00:00:00\", \"id\": \"66ndemt77vtg1fmvs778\", \"activity\": \"Weekly Therapist Alliance Survey\", \"count\": 1, \"activity_subname\": \"Wkl\"}, {\"timestamp\": \"2024-11-08T00:00:00\", \"id\": \"r5w54b4615ehefg8gx8m\", \"activity\": \"Weekly Depression Survey\", \"count\": 1, \"activity_subname\": \"Wkl\"}, {\"timestamp\": \"2024-11-12T00:00:00\", \"id\": \"8q9vsg3b1kysxzgchyz8\", \"activity\": \"Weekly Anxiety Survey\", \"count\": 1, \"activity_subname\": \"Wkl\"}, {\"timestamp\": \"2024-11-12T00:00:00\", \"id\": \"7fa3k23waas1xyxwygnb\", \"activity\": \"Weekly App Satisfaction Survey\", \"count\": 1, \"activity_subname\": \"Wkl\"}, {\"timestamp\": \"2024-11-12T00:00:00\", \"id\": \"2n0qefc74kep8w05qpax\", \"activity\": \"Weekly Sleep Survey\", \"count\": 1, \"activity_subname\": \"Wkl\"}, {\"timestamp\": \"2024-11-12T00:00:00\", \"id\": \"r5w54b4615ehefg8gx8m\", \"activity\": \"Weekly Depression Survey\", \"count\": 2, \"activity_subname\": \"Wkl\"}, {\"timestamp\": \"2024-11-12T00:00:00\", \"id\": \"66ndemt77vtg1fmvs778\", \"activity\": \"Weekly Therapist Alliance Survey\", \"count\": 1, \"activity_subname\": \"Wkl\"}, {\"timestamp\": \"2024-11-12T00:00:00\", \"id\": \"32yvhaw6sxvp0p3e1ja8\", \"activity\": \"All Daily Surveys\", \"count\": 1, \"activity_subname\": \"All\"}, {\"timestamp\": \"2024-11-13T00:00:00\", \"id\": \"32yvhaw6sxvp0p3e1ja8\", \"activity\": \"All Daily Surveys\", \"count\": 1, \"activity_subname\": \"All\"}, {\"timestamp\": \"2024-11-14T00:00:00\", \"id\": \"32yvhaw6sxvp0p3e1ja8\", \"activity\": \"All Daily Surveys\", \"count\": 1, \"activity_subname\": \"All\"}, {\"timestamp\": \"2024-11-15T00:00:00\", \"id\": \"32yvhaw6sxvp0p3e1ja8\", \"activity\": \"All Daily Surveys\", \"count\": 1, \"activity_subname\": \"All\"}, {\"timestamp\": \"2024-11-19T00:00:00\", \"id\": \"32yvhaw6sxvp0p3e1ja8\", \"activity\": \"All Daily Surveys\", \"count\": 1, \"activity_subname\": \"All\"}, {\"timestamp\": \"2024-11-22T00:00:00\", \"id\": \"ve4j8aeb53xxcp504a93\", \"activity\": \"Record, Rationalize, Replace\", \"count\": 1, \"activity_subname\": \"Rcr\"}, {\"timestamp\": \"2024-11-22T00:00:00\", \"id\": \"w34qbjrhrvk4fbgd4qxv\", \"activity\": \"Mindfulness (5min)\", \"count\": 5, \"activity_subname\": \"Mnd\"}, {\"timestamp\": \"2024-11-22T00:00:00\", \"id\": \"t9570aypbnavys8g094q\", \"activity\": \"Mindfulness: Daily Mindfulness Questions\", \"count\": 1, \"activity_subname\": \"Mnd\"}, {\"timestamp\": \"2024-11-22T00:00:00\", \"id\": \"mae9y79h78qj51gcdf9n\", \"activity\": \"Thinking More Flexibly\", \"count\": 1, \"activity_subname\": \"Thn\"}, {\"timestamp\": \"2024-11-22T00:00:00\", \"id\": \"thfh0kj0dq328wehph15\", \"activity\": \"Acting Opposite\", \"count\": 1, \"activity_subname\": \"Act\"}, {\"timestamp\": \"2024-11-25T00:00:00\", \"id\": \"32yvhaw6sxvp0p3e1ja8\", \"activity\": \"All Daily Surveys\", \"count\": 1, \"activity_subname\": \"All\"}, {\"timestamp\": \"2024-12-03T00:00:00\", \"id\": \"32yvhaw6sxvp0p3e1ja8\", \"activity\": \"All Daily Surveys\", \"count\": 1, \"activity_subname\": \"All\"}, {\"timestamp\": \"2024-12-04T00:00:00\", \"id\": \"32yvhaw6sxvp0p3e1ja8\", \"activity\": \"All Daily Surveys\", \"count\": 1, \"activity_subname\": \"All\"}, {\"timestamp\": \"2024-12-04T00:00:00\", \"id\": \"w34qbjrhrvk4fbgd4qxv\", \"activity\": \"Mindfulness (5min)\", \"count\": 1, \"activity_subname\": \"Mnd\"}, {\"timestamp\": \"2024-12-05T00:00:00\", \"id\": \"32yvhaw6sxvp0p3e1ja8\", \"activity\": \"All Daily Surveys\", \"count\": 2, \"activity_subname\": \"All\"}]}}, {\"mode\": \"vega-lite\"});\n",
       "</script>"
      ],
      "text/plain": [
       "alt.LayerChart(...)"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Graphs generated. Attaching Graphs...\n",
      "Analysis complete\n"
     ]
    }
   ],
   "source": [
    "cortex.visualizations.participant.active(part, attach_graphs=True, sample_length=100)"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 10,
=======
   "execution_count": 9,
>>>>>>> refs/remotes/origin/main
   "id": "389ba5d8-6979-4122-85a4-b490c54f0780",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[====================] 100%"
     ]
    }
   ],
   "source": [
    "#Pulling passive data\n",
    "try:\n",
    "    passive = cortex.run(part,\n",
    "                            ['screen_duration',\n",
    "                             # 'nearby_device_count', \n",
    "                             'entropy', 'data_quality', 'hometime', 'steps'],\n",
    "                            feature_params={'screen_duration': {}, 'entropy': {},\n",
    "                            'data_quality': {\"feature\":\"gps\", \"bin_size\":3600000}},\n",
    "                            start=start_date,\n",
    "                            end=end_date)\n",
    "except Exception as e:\n",
    "    passive = cortex.run(part,\n",
    "                            ['screen_duration', 'nearby_device_count','entropy', 'data_quality', 'hometime'],\n",
    "                            feature_params={'screen_duration': {}, 'entropy': {},\n",
    "                            'data_quality': {\"feature\":\"gps\", \"bin_size\":3600000}},\n",
    "                            start=start_date,\n",
    "                            end=end_date)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "637db72c-ccea-435f-8aef-b7fbc42a6fc1",
   "metadata": {},
   "source": [
    "\n",
    "# Daily Survey Scores and Smartphone Data \n",
    "\n",
    "The below graphs display different data features collected from your smartphone with your scores on your daily surveys measuring anxiety, function, and mood. The scale for the passive data features is on the left y-axis, and the scale for the daily surveys is on the right y-axis side. The goal of these graphs is to help display patterns between your passive data features and routines with your mood, anxiety, and function levels. \n",
    "\n",
    "For example, you may see that for days on which you were on your phone screen more, your mood was typically higher. "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4af866ce-7d4b-437e-8a9f-ef6e37f23e07",
   "metadata": {},
   "source": [
    "* Higher anxiety levels correspond with increased anxiety; 0 being no anxiety and 10 being the worst. Higher mood levels correspond with a better mood; 1 being the worst and 10 being the best. Higher function levels correspond with feeling like you are more able to manage day-to-day life on a scale of 0 to 4.\n",
    "  \n",
    "* Entropy is a measure of how much a participant moves around to different locations. Higher entropy typically means that the participant's time is more evenly split between different locations, while low entropy means that a person spends the vast majority of their time at one location.\n",
    "\n",
    "* Nearby devices is a measure of, if your phone is turned on and connected to bluetooth, how many devices around you are also turned on and connected to bluetooth. It can be used as a measure of sociability. For example, if you are spending a lot of time in spaces with lots of people, like a concert or a busy coffee shop, there will be more people and devices around you. \n",
    "\n",
    "* Steps are the number of steps you have taken each day, measured using your phone's accelerometer or health app."
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 11,
=======
   "execution_count": 10,
>>>>>>> refs/remotes/origin/main
   "id": "e7047660-1504-460a-9cad-2d1dbdcd4f06",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Extracting and formatting passive df\n",
    "\n",
    "passive_df = pd.DataFrame()\n",
    "for key in passive:\n",
    "    if key != 'steps':\n",
    "        passive_df[key] = passive[key]['value']\n",
    "        passive_df['date'] = passive[key]['timestamp']\n",
    "    else:\n",
    "        if passive[key].empty:\n",
    "            continue\n",
    "        else:\n",
    "            step_df = passive[key]\n",
    "            # Convert 'timestamp' to datetime\n",
    "            step_df['timestamp'] = pd.to_datetime(step_df['timestamp'], errors='coerce')\n",
    "            # Filter for step count\n",
    "            step_df = step_df[step_df['type'] == 'step_count']\n",
    "            # Extract date from timestamp\n",
    "            step_df['date'] = step_df['timestamp'].dt.date\n",
    "            # Group by date and calculate max\n",
    "            step_df = step_df.groupby('date')['value'].max().reset_index()\n",
    "            # Assign steps to passive df\n",
    "            passive_df['steps'] = step_df['value']\n",
    "\n",
    "if 'steps' in passive_df:\n",
    "    passive_df = passive_df[['date', 'screen_duration', 'entropy', 'data_quality', 'hometime', 'steps']]\n",
    "else:\n",
    "    passive_df = passive_df[['date', 'screen_duration', 'entropy', 'data_quality', 'hometime']]"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 12,
=======
   "execution_count": 11,
>>>>>>> refs/remotes/origin/main
   "id": "9c5f8cb9-2c76-41d0-bc61-1a623575b786",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "from datetime import datetime, timedelta\n",
    "import pytz\n",
    "\n",
    "#Gathering Sleep onset/offset for duration\n",
    "#Set the activity for the daily surveys as 32yvhaw6sxvp0p3e1ja8, seems to be the case when examining output of actevent below\n",
    "actevent = pd.DataFrame(LAMP.ActivityEvent.all_by_participant(part)[\"data\"])\n",
    "\n",
    "# Function to convert sleep times to datetime\n",
    "def convert_sleep_time(time_str, date):\n",
    "    time = datetime.strptime(time_str, '%I:%M%p').time()\n",
    "    return datetime.combine(date, time)\n",
    "\n",
    "if not actevent.empty and 'activity' in actevent.columns:\n",
    "    sleepevent = actevent[actevent['activity'] == '32yvhaw6sxvp0p3e1ja8']\n",
    "    # Convert timestamp to datetime in EST\n",
    "    sleepevent['timestamp'] = pd.to_datetime(sleepevent['timestamp'], unit='ms').dt.tz_localize('UTC').dt.tz_convert('US/Eastern')\n",
    "    \n",
    "    sleepevent['date'] = sleepevent['timestamp'].dt.date\n",
    "    \n",
    "    # Calculate sleep duration\n",
    "    sleep_durations = []\n",
    "    for index, row in sleepevent.iterrows():\n",
    "        # Extract date part of the datetime\n",
    "        date = row['timestamp'].date()\n",
    "        \n",
    "        # Convert sleep onset and offset to datetime\n",
    "        sleep_onset = convert_sleep_time(sleepevent['temporal_slices'][index][3]['value'], date)\n",
    "        sleep_offset = convert_sleep_time(sleepevent['temporal_slices'][index][4]['value'], date)\n",
    "        \n",
    "        # Adjust for cases where sleep spans across midnight\n",
    "        if sleep_offset < sleep_onset:\n",
    "            sleep_offset += timedelta(days=1)\n",
    "        \n",
    "        # Calculate duration\n",
    "        duration = sleep_offset - sleep_onset\n",
    "        sleep_durations.append(duration.total_seconds() / 3600)  # Convert to hours\n",
    "    \n",
    "    # Add sleep duration to the dataframe\n",
    "    sleepevent['sleep_duration_hours'] = sleep_durations    \n",
    "    sleepevent.drop(columns = {'temporal_slices', 'duration', 'static_data', 'activity', 'timestamp', '_parent'}, inplace = True)\n",
    "\n",
    "else:\n",
    "    sleepevent = pd.DataFrame()  # Empty DataFrame as a fallback\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 13,
=======
   "execution_count": 12,
>>>>>>> refs/remotes/origin/main
   "id": "904789ab-e3d1-4fd2-ac2a-250a84b7ff1b",
   "metadata": {},
   "outputs": [],
   "source": [
    "score_dict = {'category_list': ['Daily Mood Survey', 'Daily Anxiety Survey', 'Daily Function Survey'],\n",
    "                    'questions': {\n",
    "                    'Overall, how would you rate your mood today?': {'category': 'Daily Mood Survey', 'scoring':'M_map'},\n",
    "                    'Overall, how would I rate my anxiety today?': {'category': 'Daily Anxiety Survey', 'scoring':'A_map'},\n",
    "                    'I am able to manage my day-to-day life': {'category': 'Daily Function Survey', 'scoring':'F_map'},\n",
    "                    },\n",
    "                    'A_map': {\n",
    "                        '10': 10,\n",
    "                        '9': 9,\n",
    "                        '8': 8,\n",
    "                        '7': 7,\n",
    "                        '6': 6, \n",
    "                        '5': 5, \n",
    "                        '4': 4, \n",
    "                        '3': 3,\n",
    "                        '2': 2,\n",
    "                        '1': 1,\n",
    "                        '0': 0,\n",
    "                    },\n",
    "                    'M_map': {\n",
    "                        '10': 0,\n",
    "                        '9': 1,\n",
    "                        '8': 2,\n",
    "                        '7': 3,\n",
    "                        '6': 4, \n",
    "                        '5': 5, \n",
    "                        '4': 6, \n",
    "                        '3': 7,\n",
    "                        '2': 8,\n",
    "                        '1': 9,\n",
    "                        '0': 10,\n",
    "                    },\n",
    "                    'F_map': {\n",
    "                        'Strongly Agree': 0,\n",
    "                        'Agree': 1,\n",
    "                        'Neither agree nor disagree': 2,\n",
    "                        'Disagree': 3,\n",
    "                        'Strongly Disagree': 4}\n",
    "                   }"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 14,
=======
   "execution_count": 13,
>>>>>>> refs/remotes/origin/main
   "id": "1f7d68b0-72ee-412c-b715-8bb5b477059a",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Pulling dailies\n",
    "daily_dict_responses = cortex.primary.survey_scores.survey_scores(id=part,\n",
    "                                                        start=start_date,\n",
    "                                                        end=end_date,\n",
    "                                                        return_ind_ques=1,\n",
    "                                                        scoring_dict=score_dict)\n",
    "response_data = daily_dict_responses['data']\n",
    "function = []\n",
    "anxiety = []\n",
    "mood = []\n",
    "\n",
    "for item in response_data:\n",
    "    if item['question'] == \"Daily Function Survey\":\n",
    "        function.append({'score':item['score'], 'date':item['end']})\n",
    "\n",
    "for dictionary in function:\n",
    "    dictionary['date'] = datetime.fromtimestamp(dictionary['date']/1000).date()\n",
    "\n",
    "daily_df_function = pd.DataFrame(function)"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 15,
=======
   "execution_count": 14,
>>>>>>> refs/remotes/origin/main
   "id": "c43dbfc7-ae2d-440c-af66-5b71e358d0c9",
   "metadata": {},
   "outputs": [],
   "source": [
    "from datetime import datetime\n",
    "import pandas as pd\n",
    "\n",
    "# Function to convert timestamps to date string format (YYYY-MM-DD)\n",
    "def convert_timestamp_to_date(timestamp):\n",
    "    return datetime.fromtimestamp(timestamp / 1000).strftime('%Y-%m-%d')  # Directly convert to string\n",
    "\n",
    "# Extract anxiety and mood scores, making sure to convert timestamps properly\n",
    "anxiety = []\n",
    "mood = []\n",
    "\n",
    "if not actevent.empty and {'activity', 'temporal_slices', 'timestamp'}.issubset(actevent.columns):\n",
    "    for index, row in actevent[actevent['activity'] == '32yvhaw6sxvp0p3e1ja8'].iterrows():\n",
    "        temporal_slices = row.get('temporal_slices', [])\n",
    "        for item in temporal_slices:\n",
    "            if item.get('item') == 'Overall, how would I rate my anxiety today?':\n",
    "                anxiety.append({'score': item.get('value'), 'date': row['timestamp']})\n",
    "            elif item.get('item') == 'Overall, how would you rate your mood today?':\n",
    "                mood.append({'score': item.get('value'), 'date': row['timestamp']})\n",
    "\n",
    "# Convert the timestamp to date format (directly as string) if anxiety or mood lists are not empty\n",
    "if anxiety:\n",
    "    for dictionary in anxiety:\n",
    "        dictionary['date'] = convert_timestamp_to_date(dictionary['date'])\n",
    "\n",
    "if mood:\n",
    "    for dictionary in mood:\n",
    "        dictionary['date'] = convert_timestamp_to_date(dictionary['date'])\n",
    "\n",
    "# Create DataFrames for anxiety and mood\n",
    "daily_df_anxiety = pd.DataFrame(anxiety)\n",
    "daily_df_mood = pd.DataFrame(mood)\n",
    "\n",
    "# Only run if df are not empty\n",
    "import datetime\n",
    "if not daily_df_anxiety.empty and 'date' in daily_df_anxiety.columns:\n",
    "    daily_df_anxiety['date'] = daily_df_anxiety['date'].astype(str)\n",
    "    # Convert dates in daily_df_anxiety\n",
    "    daily_df_anxiety['date'] = daily_df_anxiety['date'].apply(lambda x: datetime.datetime.strptime(x, '%Y-%m-%d').date())\n",
    "\n",
    "if not daily_df_mood.empty and 'date' in daily_df_mood.columns:\n",
    "    daily_df_mood['date'] = daily_df_mood['date'].astype(str)\n",
    "    # Convert dates in daily_df_mood\n",
    "    daily_df_mood['date'] = daily_df_mood['date'].apply(lambda x: datetime.datetime.strptime(x, '%Y-%m-%d').date())"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 16,
=======
   "execution_count": 15,
>>>>>>> refs/remotes/origin/main
   "id": "37b7e43f-fa6e-4150-ae1e-fc18a8831922",
   "metadata": {},
   "outputs": [],
   "source": [
    "passive_df['date'] = pd.to_datetime(passive_df['date'], unit='ms')\n",
    "\n",
    "passive_df['date'] = passive_df['date'].dt.tz_localize('UTC')\n",
    "\n",
    "passive_df['date'] = passive_df['date'].dt.tz_convert('US/Eastern')\n",
    "\n",
    "passive_df['date'] = passive_df['date'].apply(lambda x: x.date())\n",
    "\n",
    "plot_df=passive_df\n",
    "\n",
    "# Storing all the print messages for later\n",
    "messages = []\n",
    "\n",
    "if len(daily_df_function) > 2:\n",
    "    cor_daily_df_function = daily_df_function.groupby('date')['score'].mean().reset_index()\n",
    "    cor_daily_df_function = cor_daily_df_function.rename(columns=({'score':'difficulty functioning'}))\n",
    "    passive_df = passive_df.merge(cor_daily_df_function, on=['date'], how='left')\n",
    "    plot_df = plot_df.merge(cor_daily_df_function, on=['date'], how='left')\n",
    "else:\n",
    "    messages.append(\"Fewer than 2 Daily Functioning surveys found\")\n",
    "    if len(daily_df_function)>0:\n",
    "        cor_daily_df_function = daily_df_function.groupby('date')['score'].mean().reset_index()\n",
    "        cor_daily_df_function = cor_daily_df_function.rename(columns=({'score':'difficulty functioning'}))\n",
    "        passive_df = passive_df.merge(cor_daily_df_function, on=['date'], how='left')\n",
    "        plot_df = plot_df.merge(cor_daily_df_function, on=['date'], how='left')\n",
    "\n",
    "if len(daily_df_anxiety) > 2:\n",
    "    cor_daily_df_anxiety = daily_df_anxiety.groupby('date')['score'].mean().reset_index()\n",
    "    cor_daily_df_anxiety = cor_daily_df_anxiety.rename(columns=({'score':'anxiety'}))\n",
    "    passive_df = passive_df.merge(cor_daily_df_anxiety, on=['date'], how='left')\n",
    "    plot_df = plot_df.merge(cor_daily_df_anxiety, on=['date'], how='left')\n",
    "else:\n",
    "    messages.append(\"Fewer than 2 Daily Anxiety surveys found\")\n",
    "    if len(daily_df_anxiety)>0:\n",
    "        cor_daily_df_anxiety = daily_df_anxiety.groupby('date')['score'].mean().reset_index()\n",
    "        cor_daily_df_anxiety = cor_daily_df_anxiety.rename(columns=({'score':'anxiety'}))\n",
    "        passive_df = passive_df.merge(cor_daily_df_anxiety, on=['date'], how='left')\n",
    "        plot_df = plot_df.merge(cor_daily_df_anxiety, on=['date'], how='left')\n",
    "\n",
    "if len(daily_df_mood) > 2:\n",
    "    cor_daily_df_mood = daily_df_mood.groupby('date')['score'].mean().reset_index()\n",
    "    cor_daily_df_mood = cor_daily_df_mood.rename(columns=({'score':'depression'}))\n",
    "    passive_df = passive_df.merge(cor_daily_df_mood, on=['date'], how='left')\n",
    "    plot_df= plot_df.merge(cor_daily_df_mood, on=['date'], how='left')\n",
    "else:\n",
    "    messages.append(\"Fewer than 2 Daily Depression surveys found\")\n",
    "    if len(daily_df_mood)>0:\n",
    "        cor_daily_df_mood = daily_df_mood.groupby('date')['score'].mean().reset_index()\n",
    "        cor_daily_df_mood = cor_daily_df_mood.rename(columns=({'score':'anxiety'}))\n",
    "        passive_df = passive_df.merge(cor_daily_df_mood, on=['date'], how='left')\n",
    "        plot_df = plot_df.merge(cor_daily_df_mood, on=['date'], how='left')    \n",
    "    \n",
    "if len(sleepevent) > 2:\n",
    "    cor_sleepevent = sleepevent.groupby('date')['sleep_duration_hours'].mean().reset_index()\n",
    "    passive_df = passive_df.merge(cor_sleepevent, on=['date'], how='left')\n",
    "    plot_df = plot_df.merge(cor_sleepevent, on=['date'], how='left')\n",
    "else:\n",
    "    messages.append(\"Fewer than 2 Daily Sleep surveys found\")\n",
    "    if len(sleepevent)>0:\n",
    "        cor_sleepeventd = sleepevent.groupby('date')['score'].mean().reset_index()\n",
    "        cor_sleepevent = cor_sleepevent.rename(columns=({'score':'anxiety'}))\n",
    "        passive_df = passive_df.merge(cor_sleepevent, on=['date'], how='left')\n",
    "        plot_df = plot_df.merge(cor_sleepevent, on=['date'], how='left')    \n",
    "\n",
    "\n",
    "passive_df['screen_duration'] = passive_df['screen_duration'].replace(0, np.nan)\n",
    "passive_df['entropy'] = passive_df['entropy'].replace(0, np.nan)\n",
    "plot_df['screen_duration'] = plot_df['screen_duration'].replace(0, np.nan)\n",
    "plot_df['entropy'] = plot_df['entropy'].replace(0, np.nan)\n",
    "\n",
    "\n",
    "\n",
    "try:\n",
    "    sleep_df['date'] = sleep_df['timestamp'].apply(lambda x: x.strftime('%Y-%m-%d'))\n",
    "    sleep_df = sleep_df[['date', 'hours']]\n",
    "    sleep_df.columns = ['date', 'sleep duration']\n",
    "    passive_df = pd.merge(passive_df, sleep_df, on=['date'])\n",
    "    passive_df['sleep duration'] = passive_df['sleep duration'].astype(float)\n",
    "    plot_df = pd.merge(plot_df, sleep_df, on=['date'])\n",
    "    plot_df['sleep duration'] = plot_df['sleep duration'].astype(float)\n",
    "\n",
    "\n",
    "except:\n",
    "    pass\n",
    "\n",
    "passive_df['date'] = passive_df['date'].astype(object)\n",
    "plot_df['date'] = plot_df['date'].astype(object)\n",
    "\n",
    "cor_data = (passive_df.corr(min_periods=5).stack()\n",
    "          .reset_index()   \n",
    "          .rename(columns={0: 'correlation', 'level_0': 'variable', 'level_1': 'variable2'}))\n",
    "cor_data['correlation_label'] = cor_data['correlation'].map('{:.2f}'.format)  # Round to 2 decimal\n",
    "\n",
    "\n",
    "cor_data = cor_data[cor_data['correlation'] != 1.00]\n",
    "\n",
    "cor_data = cor_data[cor_data['correlation'] != -1.00]\n",
    "\n",
    "base = alt.Chart(cor_data).transform_filter(\n",
    "alt.datum.variable > alt.datum.variable2\n",
    ").encode(\n",
    "    x='variable2:O',\n",
    "    y='variable:O'    \n",
    ")\n",
    "\n",
    "text = base.mark_text().encode(\n",
    "    text='correlation_label',\n",
    "    color=alt.condition(\n",
    "        alt.datum.correlation > 0.5, \n",
    "        alt.value('white'),\n",
    "        alt.value('black')\n",
    "    )\n",
    ")\n",
    "\n",
    "\n",
    "cor_plot = base.mark_rect().encode(\n",
    "    color='correlation:Q'\n",
    ").properties(\n",
    "    width=300,\n",
    "    height=200\n",
    ")\n",
    "cor_matrix = cor_plot + text\n"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 17,
=======
   "execution_count": 16,
>>>>>>> refs/remotes/origin/main
   "id": "c33f8167-2d88-4ed0-bc52-7cea8de87a2d",
   "metadata": {},
   "outputs": [],
   "source": [
    "passive_df.rename(columns = {'difficulty functioning':'dysfunction'}, inplace = True)\n",
    "passive_df['screen_duration'] = passive_df['screen_duration']/3600000\n",
    "passive_df['hometime'] = passive_df['hometime']/3600000\n",
    "\n",
    "plot_df.rename(columns = {'difficulty functioning':'dysfunction'}, inplace = True)\n",
    "plot_df['screen_duration'] = plot_df['screen_duration']/3600000\n",
    "plot_df['hometime'] = plot_df['hometime']/3600000"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 18,
=======
   "execution_count": 17,
>>>>>>> refs/remotes/origin/main
   "id": "44002a7f-0c1d-40a2-8789-17f54354a252",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
<<<<<<< HEAD
       "<div>                            <div id=\"c55c4a1a-d24a-4cdd-a7ab-de1d08bf3e9c\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                require([\"plotly\"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"c55c4a1a-d24a-4cdd-a7ab-de1d08bf3e9c\")) {                    Plotly.newPlot(                        \"c55c4a1a-d24a-4cdd-a7ab-de1d08bf3e9c\",                        [{\"marker\":{\"color\":\"#CCE5FF\"},\"name\":\"Screentime\",\"visible\":true,\"x\":[\"2024-11-09\",\"2024-11-10\",\"2024-11-11\",\"2024-11-12\",\"2024-11-13\",\"2024-11-14\",\"2024-11-15\",\"2024-11-16\",\"2024-11-17\",\"2024-11-18\",\"2024-11-19\",\"2024-11-20\",\"2024-11-21\",\"2024-11-22\",\"2024-11-23\",\"2024-11-24\",\"2024-11-25\",\"2024-11-26\",\"2024-11-27\",\"2024-11-28\",\"2024-11-29\",\"2024-11-30\",\"2024-12-01\",\"2024-12-02\",\"2024-12-03\",\"2024-12-04\",\"2024-12-05\",\"2024-12-06\"],\"y\":[null,null,null,null,2.5159,2.9924858333333333,15.068338055555555,11.523035277777778,10.479388055555555,7.229040833333333,9.150442222222223,12.3886825,13.603421388888888,10.317569722222222,null,null,6.182831388888889,10.927481666666667,3.029990277777778,null,null,null,null,8.854273888888889,14.719159444444445,13.192213333333333,11.856486666666667,12.550508055555555],\"type\":\"bar\",\"xaxis\":\"x\",\"yaxis\":\"y\"},{\"connectgaps\":true,\"line\":{\"width\":2},\"mode\":\"lines+markers\",\"name\":\"Depression\",\"visible\":true,\"x\":[\"2024-11-09\",\"2024-11-10\",\"2024-11-11\",\"2024-11-12\",\"2024-11-13\",\"2024-11-14\",\"2024-11-15\",\"2024-11-16\",\"2024-11-17\",\"2024-11-18\",\"2024-11-19\",\"2024-11-20\",\"2024-11-21\",\"2024-11-22\",\"2024-11-23\",\"2024-11-24\",\"2024-11-25\",\"2024-11-26\",\"2024-11-27\",\"2024-11-28\",\"2024-11-29\",\"2024-11-30\",\"2024-12-01\",\"2024-12-02\",\"2024-12-03\",\"2024-12-04\",\"2024-12-05\",\"2024-12-06\"],\"y\":[null,null,null,5.0,7.0,5.0,7.0,null,null,null,7.0,null,null,null,null,null,2.0,null,null,null,null,null,null,null,8.0,9.0,6.0,null],\"type\":\"scatter\",\"xaxis\":\"x\",\"yaxis\":\"y2\"},{\"connectgaps\":true,\"mode\":\"lines+markers\",\"name\":\"Anxiety\",\"visible\":true,\"x\":[\"2024-11-09\",\"2024-11-10\",\"2024-11-11\",\"2024-11-12\",\"2024-11-13\",\"2024-11-14\",\"2024-11-15\",\"2024-11-16\",\"2024-11-17\",\"2024-11-18\",\"2024-11-19\",\"2024-11-20\",\"2024-11-21\",\"2024-11-22\",\"2024-11-23\",\"2024-11-24\",\"2024-11-25\",\"2024-11-26\",\"2024-11-27\",\"2024-11-28\",\"2024-11-29\",\"2024-11-30\",\"2024-12-01\",\"2024-12-02\",\"2024-12-03\",\"2024-12-04\",\"2024-12-05\",\"2024-12-06\"],\"y\":[null,null,null,7.0,3.0,9.0,5.0,null,null,null,6.0,null,null,null,null,null,10.0,null,null,null,null,null,null,null,3.0,4.0,5.5,null],\"type\":\"scatter\",\"xaxis\":\"x\",\"yaxis\":\"y2\"},{\"connectgaps\":true,\"mode\":\"lines+markers\",\"name\":\"Difficulty Functioning\",\"visible\":true,\"x\":[\"2024-11-09\",\"2024-11-10\",\"2024-11-11\",\"2024-11-12\",\"2024-11-13\",\"2024-11-14\",\"2024-11-15\",\"2024-11-16\",\"2024-11-17\",\"2024-11-18\",\"2024-11-19\",\"2024-11-20\",\"2024-11-21\",\"2024-11-22\",\"2024-11-23\",\"2024-11-24\",\"2024-11-25\",\"2024-11-26\",\"2024-11-27\",\"2024-11-28\",\"2024-11-29\",\"2024-11-30\",\"2024-12-01\",\"2024-12-02\",\"2024-12-03\",\"2024-12-04\",\"2024-12-05\",\"2024-12-06\"],\"y\":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0.5,null],\"type\":\"scatter\",\"xaxis\":\"x\",\"yaxis\":\"y2\"},{\"marker\":{\"color\":\"#CCCCFF\"},\"name\":\"Hometime\",\"visible\":false,\"x\":[\"2024-11-09\",\"2024-11-10\",\"2024-11-11\",\"2024-11-12\",\"2024-11-13\",\"2024-11-14\",\"2024-11-15\",\"2024-11-16\",\"2024-11-17\",\"2024-11-18\",\"2024-11-19\",\"2024-11-20\",\"2024-11-21\",\"2024-11-22\",\"2024-11-23\",\"2024-11-24\",\"2024-11-25\",\"2024-11-26\",\"2024-11-27\",\"2024-11-28\",\"2024-11-29\",\"2024-11-30\",\"2024-12-01\",\"2024-12-02\",\"2024-12-03\",\"2024-12-04\",\"2024-12-05\",\"2024-12-06\"],\"y\":[null,null,5.4191666666666665,22.2341925,12.067222222222222,1.6677127777777778,13.774420833333334,16.533615277777777,19.07558611111111,5.129530833333333,8.230085,23.392222222222223,15.624445,13.225412222222221,null,null,2.829065,23.63996138888889,13.022777777777778,null,null,null,null,5.438895555555556,14.645832222222221,20.45977472222222,15.58510888888889,12.587129444444445],\"type\":\"bar\",\"xaxis\":\"x\",\"yaxis\":\"y\"},{\"connectgaps\":true,\"line\":{\"width\":2},\"mode\":\"lines+markers\",\"name\":\"Depression\",\"visible\":false,\"x\":[\"2024-11-09\",\"2024-11-10\",\"2024-11-11\",\"2024-11-12\",\"2024-11-13\",\"2024-11-14\",\"2024-11-15\",\"2024-11-16\",\"2024-11-17\",\"2024-11-18\",\"2024-11-19\",\"2024-11-20\",\"2024-11-21\",\"2024-11-22\",\"2024-11-23\",\"2024-11-24\",\"2024-11-25\",\"2024-11-26\",\"2024-11-27\",\"2024-11-28\",\"2024-11-29\",\"2024-11-30\",\"2024-12-01\",\"2024-12-02\",\"2024-12-03\",\"2024-12-04\",\"2024-12-05\",\"2024-12-06\"],\"y\":[null,null,null,5.0,7.0,5.0,7.0,null,null,null,7.0,null,null,null,null,null,2.0,null,null,null,null,null,null,null,8.0,9.0,6.0,null],\"type\":\"scatter\",\"xaxis\":\"x\",\"yaxis\":\"y2\"},{\"connectgaps\":true,\"mode\":\"lines+markers\",\"name\":\"Anxiety\",\"visible\":false,\"x\":[\"2024-11-09\",\"2024-11-10\",\"2024-11-11\",\"2024-11-12\",\"2024-11-13\",\"2024-11-14\",\"2024-11-15\",\"2024-11-16\",\"2024-11-17\",\"2024-11-18\",\"2024-11-19\",\"2024-11-20\",\"2024-11-21\",\"2024-11-22\",\"2024-11-23\",\"2024-11-24\",\"2024-11-25\",\"2024-11-26\",\"2024-11-27\",\"2024-11-28\",\"2024-11-29\",\"2024-11-30\",\"2024-12-01\",\"2024-12-02\",\"2024-12-03\",\"2024-12-04\",\"2024-12-05\",\"2024-12-06\"],\"y\":[null,null,null,7.0,3.0,9.0,5.0,null,null,null,6.0,null,null,null,null,null,10.0,null,null,null,null,null,null,null,3.0,4.0,5.5,null],\"type\":\"scatter\",\"xaxis\":\"x\",\"yaxis\":\"y2\"},{\"connectgaps\":true,\"mode\":\"lines+markers\",\"name\":\"Difficulty Functioning\",\"visible\":false,\"x\":[\"2024-11-09\",\"2024-11-10\",\"2024-11-11\",\"2024-11-12\",\"2024-11-13\",\"2024-11-14\",\"2024-11-15\",\"2024-11-16\",\"2024-11-17\",\"2024-11-18\",\"2024-11-19\",\"2024-11-20\",\"2024-11-21\",\"2024-11-22\",\"2024-11-23\",\"2024-11-24\",\"2024-11-25\",\"2024-11-26\",\"2024-11-27\",\"2024-11-28\",\"2024-11-29\",\"2024-11-30\",\"2024-12-01\",\"2024-12-02\",\"2024-12-03\",\"2024-12-04\",\"2024-12-05\",\"2024-12-06\"],\"y\":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0.5,null],\"type\":\"scatter\",\"xaxis\":\"x\",\"yaxis\":\"y2\"},{\"marker\":{\"color\":\"#CCFF99\"},\"name\":\"Entropy\",\"visible\":false,\"x\":[\"2024-11-09\",\"2024-11-10\",\"2024-11-11\",\"2024-11-12\",\"2024-11-13\",\"2024-11-14\",\"2024-11-15\",\"2024-11-16\",\"2024-11-17\",\"2024-11-18\",\"2024-11-19\",\"2024-11-20\",\"2024-11-21\",\"2024-11-22\",\"2024-11-23\",\"2024-11-24\",\"2024-11-25\",\"2024-11-26\",\"2024-11-27\",\"2024-11-28\",\"2024-11-29\",\"2024-11-30\",\"2024-12-01\",\"2024-12-02\",\"2024-12-03\",\"2024-12-04\",\"2024-12-05\",\"2024-12-06\"],\"y\":[null,null,0.4888568403277253,0.17209036080924073,null,0.6860771796515455,0.6293374713557213,0.7402797992778162,0.2476630722857764,1.0251910148490686,0.7716488793411393,0.06311402240719631,0.3204570549552286,0.5864317076384609,null,null,1.0448595400375815,null,null,null,null,null,null,0.2730253805719647,0.41875920816032375,0.23341702231050435,0.24358339836865392,0.6693503602453091],\"type\":\"bar\",\"xaxis\":\"x\",\"yaxis\":\"y\"},{\"connectgaps\":true,\"line\":{\"width\":2},\"mode\":\"lines+markers\",\"name\":\"Depression\",\"visible\":false,\"x\":[\"2024-11-09\",\"2024-11-10\",\"2024-11-11\",\"2024-11-12\",\"2024-11-13\",\"2024-11-14\",\"2024-11-15\",\"2024-11-16\",\"2024-11-17\",\"2024-11-18\",\"2024-11-19\",\"2024-11-20\",\"2024-11-21\",\"2024-11-22\",\"2024-11-23\",\"2024-11-24\",\"2024-11-25\",\"2024-11-26\",\"2024-11-27\",\"2024-11-28\",\"2024-11-29\",\"2024-11-30\",\"2024-12-01\",\"2024-12-02\",\"2024-12-03\",\"2024-12-04\",\"2024-12-05\",\"2024-12-06\"],\"y\":[null,null,null,5.0,7.0,5.0,7.0,null,null,null,7.0,null,null,null,null,null,2.0,null,null,null,null,null,null,null,8.0,9.0,6.0,null],\"type\":\"scatter\",\"xaxis\":\"x\",\"yaxis\":\"y2\"},{\"connectgaps\":true,\"mode\":\"lines+markers\",\"name\":\"Anxiety\",\"visible\":false,\"x\":[\"2024-11-09\",\"2024-11-10\",\"2024-11-11\",\"2024-11-12\",\"2024-11-13\",\"2024-11-14\",\"2024-11-15\",\"2024-11-16\",\"2024-11-17\",\"2024-11-18\",\"2024-11-19\",\"2024-11-20\",\"2024-11-21\",\"2024-11-22\",\"2024-11-23\",\"2024-11-24\",\"2024-11-25\",\"2024-11-26\",\"2024-11-27\",\"2024-11-28\",\"2024-11-29\",\"2024-11-30\",\"2024-12-01\",\"2024-12-02\",\"2024-12-03\",\"2024-12-04\",\"2024-12-05\",\"2024-12-06\"],\"y\":[null,null,null,7.0,3.0,9.0,5.0,null,null,null,6.0,null,null,null,null,null,10.0,null,null,null,null,null,null,null,3.0,4.0,5.5,null],\"type\":\"scatter\",\"xaxis\":\"x\",\"yaxis\":\"y2\"},{\"connectgaps\":true,\"mode\":\"lines+markers\",\"name\":\"Difficulty Functioning\",\"visible\":false,\"x\":[\"2024-11-09\",\"2024-11-10\",\"2024-11-11\",\"2024-11-12\",\"2024-11-13\",\"2024-11-14\",\"2024-11-15\",\"2024-11-16\",\"2024-11-17\",\"2024-11-18\",\"2024-11-19\",\"2024-11-20\",\"2024-11-21\",\"2024-11-22\",\"2024-11-23\",\"2024-11-24\",\"2024-11-25\",\"2024-11-26\",\"2024-11-27\",\"2024-11-28\",\"2024-11-29\",\"2024-11-30\",\"2024-12-01\",\"2024-12-02\",\"2024-12-03\",\"2024-12-04\",\"2024-12-05\",\"2024-12-06\"],\"y\":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0.5,null],\"type\":\"scatter\",\"xaxis\":\"x\",\"yaxis\":\"y2\"},{\"marker\":{\"color\":\"#FFCC99\"},\"name\":\"Sleep Duration\",\"visible\":false,\"x\":[\"2024-11-09\",\"2024-11-10\",\"2024-11-11\",\"2024-11-12\",\"2024-11-13\",\"2024-11-14\",\"2024-11-15\",\"2024-11-16\",\"2024-11-17\",\"2024-11-18\",\"2024-11-19\",\"2024-11-20\",\"2024-11-21\",\"2024-11-22\",\"2024-11-23\",\"2024-11-24\",\"2024-11-25\",\"2024-11-26\",\"2024-11-27\",\"2024-11-28\",\"2024-11-29\",\"2024-11-30\",\"2024-12-01\",\"2024-12-02\",\"2024-12-03\",\"2024-12-04\",\"2024-12-05\",\"2024-12-06\"],\"y\":[null,null,8.25,8.0,null,7.75,null,null,null,null,7.0,null,null,null,null,null,2.0,null,null,null,null,null,null,7.5,7.5,null,7.75,null],\"type\":\"bar\",\"xaxis\":\"x\",\"yaxis\":\"y\"},{\"connectgaps\":true,\"line\":{\"width\":2},\"mode\":\"lines+markers\",\"name\":\"Depression\",\"visible\":false,\"x\":[\"2024-11-09\",\"2024-11-10\",\"2024-11-11\",\"2024-11-12\",\"2024-11-13\",\"2024-11-14\",\"2024-11-15\",\"2024-11-16\",\"2024-11-17\",\"2024-11-18\",\"2024-11-19\",\"2024-11-20\",\"2024-11-21\",\"2024-11-22\",\"2024-11-23\",\"2024-11-24\",\"2024-11-25\",\"2024-11-26\",\"2024-11-27\",\"2024-11-28\",\"2024-11-29\",\"2024-11-30\",\"2024-12-01\",\"2024-12-02\",\"2024-12-03\",\"2024-12-04\",\"2024-12-05\",\"2024-12-06\"],\"y\":[null,null,null,5.0,7.0,5.0,7.0,null,null,null,7.0,null,null,null,null,null,2.0,null,null,null,null,null,null,null,8.0,9.0,6.0,null],\"type\":\"scatter\",\"xaxis\":\"x\",\"yaxis\":\"y2\"},{\"connectgaps\":true,\"mode\":\"lines+markers\",\"name\":\"Anxiety\",\"visible\":false,\"x\":[\"2024-11-09\",\"2024-11-10\",\"2024-11-11\",\"2024-11-12\",\"2024-11-13\",\"2024-11-14\",\"2024-11-15\",\"2024-11-16\",\"2024-11-17\",\"2024-11-18\",\"2024-11-19\",\"2024-11-20\",\"2024-11-21\",\"2024-11-22\",\"2024-11-23\",\"2024-11-24\",\"2024-11-25\",\"2024-11-26\",\"2024-11-27\",\"2024-11-28\",\"2024-11-29\",\"2024-11-30\",\"2024-12-01\",\"2024-12-02\",\"2024-12-03\",\"2024-12-04\",\"2024-12-05\",\"2024-12-06\"],\"y\":[null,null,null,7.0,3.0,9.0,5.0,null,null,null,6.0,null,null,null,null,null,10.0,null,null,null,null,null,null,null,3.0,4.0,5.5,null],\"type\":\"scatter\",\"xaxis\":\"x\",\"yaxis\":\"y2\"},{\"connectgaps\":true,\"mode\":\"lines+markers\",\"name\":\"Difficulty Functioning\",\"visible\":false,\"x\":[\"2024-11-09\",\"2024-11-10\",\"2024-11-11\",\"2024-11-12\",\"2024-11-13\",\"2024-11-14\",\"2024-11-15\",\"2024-11-16\",\"2024-11-17\",\"2024-11-18\",\"2024-11-19\",\"2024-11-20\",\"2024-11-21\",\"2024-11-22\",\"2024-11-23\",\"2024-11-24\",\"2024-11-25\",\"2024-11-26\",\"2024-11-27\",\"2024-11-28\",\"2024-11-29\",\"2024-11-30\",\"2024-12-01\",\"2024-12-02\",\"2024-12-03\",\"2024-12-04\",\"2024-12-05\",\"2024-12-06\"],\"y\":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0.5,null],\"type\":\"scatter\",\"xaxis\":\"x\",\"yaxis\":\"y2\"},{\"marker\":{\"color\":\"#FF9999\"},\"name\":\"Steps\",\"visible\":false,\"x\":[\"2024-11-09\",\"2024-11-10\",\"2024-11-11\",\"2024-11-12\",\"2024-11-13\",\"2024-11-14\",\"2024-11-15\",\"2024-11-16\",\"2024-11-17\",\"2024-11-18\",\"2024-11-19\",\"2024-11-20\",\"2024-11-21\",\"2024-11-22\",\"2024-11-23\",\"2024-11-24\",\"2024-11-25\",\"2024-11-26\",\"2024-11-27\",\"2024-11-28\",\"2024-11-29\",\"2024-11-30\",\"2024-12-01\",\"2024-12-02\",\"2024-12-03\",\"2024-12-04\",\"2024-12-05\",\"2024-12-06\"],\"y\":[13628.0,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],\"type\":\"bar\",\"xaxis\":\"x\",\"yaxis\":\"y\"},{\"connectgaps\":true,\"line\":{\"width\":2},\"mode\":\"lines+markers\",\"name\":\"Depression\",\"visible\":false,\"x\":[\"2024-11-09\",\"2024-11-10\",\"2024-11-11\",\"2024-11-12\",\"2024-11-13\",\"2024-11-14\",\"2024-11-15\",\"2024-11-16\",\"2024-11-17\",\"2024-11-18\",\"2024-11-19\",\"2024-11-20\",\"2024-11-21\",\"2024-11-22\",\"2024-11-23\",\"2024-11-24\",\"2024-11-25\",\"2024-11-26\",\"2024-11-27\",\"2024-11-28\",\"2024-11-29\",\"2024-11-30\",\"2024-12-01\",\"2024-12-02\",\"2024-12-03\",\"2024-12-04\",\"2024-12-05\",\"2024-12-06\"],\"y\":[null,null,null,5.0,7.0,5.0,7.0,null,null,null,7.0,null,null,null,null,null,2.0,null,null,null,null,null,null,null,8.0,9.0,6.0,null],\"type\":\"scatter\",\"xaxis\":\"x\",\"yaxis\":\"y2\"},{\"connectgaps\":true,\"mode\":\"lines+markers\",\"name\":\"Anxiety\",\"visible\":false,\"x\":[\"2024-11-09\",\"2024-11-10\",\"2024-11-11\",\"2024-11-12\",\"2024-11-13\",\"2024-11-14\",\"2024-11-15\",\"2024-11-16\",\"2024-11-17\",\"2024-11-18\",\"2024-11-19\",\"2024-11-20\",\"2024-11-21\",\"2024-11-22\",\"2024-11-23\",\"2024-11-24\",\"2024-11-25\",\"2024-11-26\",\"2024-11-27\",\"2024-11-28\",\"2024-11-29\",\"2024-11-30\",\"2024-12-01\",\"2024-12-02\",\"2024-12-03\",\"2024-12-04\",\"2024-12-05\",\"2024-12-06\"],\"y\":[null,null,null,7.0,3.0,9.0,5.0,null,null,null,6.0,null,null,null,null,null,10.0,null,null,null,null,null,null,null,3.0,4.0,5.5,null],\"type\":\"scatter\",\"xaxis\":\"x\",\"yaxis\":\"y2\"},{\"connectgaps\":true,\"mode\":\"lines+markers\",\"name\":\"Difficulty Functioning\",\"visible\":false,\"x\":[\"2024-11-09\",\"2024-11-10\",\"2024-11-11\",\"2024-11-12\",\"2024-11-13\",\"2024-11-14\",\"2024-11-15\",\"2024-11-16\",\"2024-11-17\",\"2024-11-18\",\"2024-11-19\",\"2024-11-20\",\"2024-11-21\",\"2024-11-22\",\"2024-11-23\",\"2024-11-24\",\"2024-11-25\",\"2024-11-26\",\"2024-11-27\",\"2024-11-28\",\"2024-11-29\",\"2024-11-30\",\"2024-12-01\",\"2024-12-02\",\"2024-12-03\",\"2024-12-04\",\"2024-12-05\",\"2024-12-06\"],\"y\":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0.5,null],\"type\":\"scatter\",\"xaxis\":\"x\",\"yaxis\":\"y2\"}],                        {\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"type\":\"scattergl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"bgcolor\":\"#E5ECF6\",\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"#E5ECF6\",\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"subunitcolor\":\"white\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"white\"},\"title\":{\"x\":0.05},\"mapbox\":{\"style\":\"light\"}}},\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,0.94]},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"\\u003cb\\u003eTime\\u002fNumber\\u003c\\u002fb\\u003e\"}},\"yaxis2\":{\"anchor\":\"x\",\"overlaying\":\"y\",\"side\":\"right\",\"title\":{\"text\":\"\\u003cb\\u003eSurvey Score\\u003c\\u002fb\\u003e\"}},\"title\":{\"text\":\"Daily Scores\"},\"updatemenus\":[{\"buttons\":[{\"args\":[{\"visible\":[true,true,true,true,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false]},{\"title\":\"Screentime\"}],\"label\":\"Screentime\",\"method\":\"update\"},{\"args\":[{\"visible\":[false,false,false,false,true,true,true,true,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false]},{\"title\":\"Hometime\"}],\"label\":\"Hometime\",\"method\":\"update\"},{\"args\":[{\"visible\":[false,false,false,false,false,false,false,false,true,true,true,true,false,false,false,false,false,false,false,false,false,false,false,false]},{\"title\":\"Entropy\"}],\"label\":\"Entropy\",\"method\":\"update\"},{\"args\":[{\"visible\":[false,false,false,false,false,false,false,false,false,false,false,false,true,true,true,true,false,false,false,false,false,false,false,false]},{\"title\":\"Sleep Duration\"}],\"label\":\"Sleep Duration\",\"method\":\"update\"},{\"args\":[{\"visible\":[false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,true,true,true,true,false,false,false,false]},{\"title\":\"Steps\"}],\"label\":\"Steps\",\"method\":\"update\"}],\"showactive\":true,\"type\":\"dropdown\",\"x\":1.3,\"y\":0.5}]},                        {\"responsive\": true}                    ).then(function(){\n",
       "                            \n",
       "var gd = document.getElementById('c55c4a1a-d24a-4cdd-a7ab-de1d08bf3e9c');\n",
=======
       "<div>                            <div id=\"2f9aa161-932d-4b79-996b-f3eeb49d08ff\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                require([\"plotly\"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"2f9aa161-932d-4b79-996b-f3eeb49d08ff\")) {                    Plotly.newPlot(                        \"2f9aa161-932d-4b79-996b-f3eeb49d08ff\",                        [{\"marker\":{\"color\":\"#CCE5FF\"},\"name\":\"Screentime\",\"visible\":true,\"x\":[\"2024-11-09\",\"2024-11-10\",\"2024-11-11\",\"2024-11-12\",\"2024-11-13\",\"2024-11-14\",\"2024-11-15\",\"2024-11-16\",\"2024-11-17\",\"2024-11-18\",\"2024-11-19\",\"2024-11-20\",\"2024-11-21\",\"2024-11-22\",\"2024-11-23\",\"2024-11-24\",\"2024-11-25\",\"2024-11-26\",\"2024-11-27\",\"2024-11-28\",\"2024-11-29\",\"2024-11-30\",\"2024-12-01\",\"2024-12-02\",\"2024-12-03\",\"2024-12-04\",\"2024-12-05\",\"2024-12-06\"],\"y\":[null,null,null,null,2.5159,2.9924858333333333,15.068338055555555,11.523035277777778,10.479388055555555,7.229040833333333,9.150442222222223,12.3886825,13.603421388888888,10.317569722222222,null,null,6.182831388888889,10.927481666666667,3.029990277777778,null,null,null,null,8.854273888888889,14.719159444444445,13.192213333333333,11.856486666666667,12.550508055555555],\"type\":\"bar\",\"xaxis\":\"x\",\"yaxis\":\"y\"},{\"connectgaps\":true,\"line\":{\"width\":2},\"mode\":\"lines+markers\",\"name\":\"Depression\",\"visible\":true,\"x\":[\"2024-11-09\",\"2024-11-10\",\"2024-11-11\",\"2024-11-12\",\"2024-11-13\",\"2024-11-14\",\"2024-11-15\",\"2024-11-16\",\"2024-11-17\",\"2024-11-18\",\"2024-11-19\",\"2024-11-20\",\"2024-11-21\",\"2024-11-22\",\"2024-11-23\",\"2024-11-24\",\"2024-11-25\",\"2024-11-26\",\"2024-11-27\",\"2024-11-28\",\"2024-11-29\",\"2024-11-30\",\"2024-12-01\",\"2024-12-02\",\"2024-12-03\",\"2024-12-04\",\"2024-12-05\",\"2024-12-06\"],\"y\":[null,null,5.0,7.0,5.0,7.0,null,null,null,null,7.0,null,null,null,null,null,2.0,null,null,null,null,null,null,8.0,9.0,7.0,5.0,null],\"type\":\"scatter\",\"xaxis\":\"x\",\"yaxis\":\"y2\"},{\"connectgaps\":true,\"mode\":\"lines+markers\",\"name\":\"Anxiety\",\"visible\":true,\"x\":[\"2024-11-09\",\"2024-11-10\",\"2024-11-11\",\"2024-11-12\",\"2024-11-13\",\"2024-11-14\",\"2024-11-15\",\"2024-11-16\",\"2024-11-17\",\"2024-11-18\",\"2024-11-19\",\"2024-11-20\",\"2024-11-21\",\"2024-11-22\",\"2024-11-23\",\"2024-11-24\",\"2024-11-25\",\"2024-11-26\",\"2024-11-27\",\"2024-11-28\",\"2024-11-29\",\"2024-11-30\",\"2024-12-01\",\"2024-12-02\",\"2024-12-03\",\"2024-12-04\",\"2024-12-05\",\"2024-12-06\"],\"y\":[null,null,7.0,3.0,9.0,5.0,null,null,null,null,6.0,null,null,null,null,null,10.0,null,null,null,null,null,null,3.0,4.0,3.0,8.0,null],\"type\":\"scatter\",\"xaxis\":\"x\",\"yaxis\":\"y2\"},{\"connectgaps\":true,\"mode\":\"lines+markers\",\"name\":\"Difficulty Functioning\",\"visible\":true,\"x\":[\"2024-11-09\",\"2024-11-10\",\"2024-11-11\",\"2024-11-12\",\"2024-11-13\",\"2024-11-14\",\"2024-11-15\",\"2024-11-16\",\"2024-11-17\",\"2024-11-18\",\"2024-11-19\",\"2024-11-20\",\"2024-11-21\",\"2024-11-22\",\"2024-11-23\",\"2024-11-24\",\"2024-11-25\",\"2024-11-26\",\"2024-11-27\",\"2024-11-28\",\"2024-11-29\",\"2024-11-30\",\"2024-12-01\",\"2024-12-02\",\"2024-12-03\",\"2024-12-04\",\"2024-12-05\",\"2024-12-06\"],\"y\":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0.0,1.0,null],\"type\":\"scatter\",\"xaxis\":\"x\",\"yaxis\":\"y2\"},{\"marker\":{\"color\":\"#CCCCFF\"},\"name\":\"Hometime\",\"visible\":false,\"x\":[\"2024-11-09\",\"2024-11-10\",\"2024-11-11\",\"2024-11-12\",\"2024-11-13\",\"2024-11-14\",\"2024-11-15\",\"2024-11-16\",\"2024-11-17\",\"2024-11-18\",\"2024-11-19\",\"2024-11-20\",\"2024-11-21\",\"2024-11-22\",\"2024-11-23\",\"2024-11-24\",\"2024-11-25\",\"2024-11-26\",\"2024-11-27\",\"2024-11-28\",\"2024-11-29\",\"2024-11-30\",\"2024-12-01\",\"2024-12-02\",\"2024-12-03\",\"2024-12-04\",\"2024-12-05\",\"2024-12-06\"],\"y\":[null,null,5.4191666666666665,22.2341925,12.067222222222222,1.6677127777777778,13.774420833333334,16.533615277777777,19.07558611111111,5.129530833333333,8.230085,23.392222222222223,15.624445,13.225412222222221,null,null,2.829065,23.63996138888889,13.022777777777778,null,null,null,null,5.438895555555556,14.645832222222221,20.45977472222222,15.58510888888889,12.587129444444445],\"type\":\"bar\",\"xaxis\":\"x\",\"yaxis\":\"y\"},{\"connectgaps\":true,\"line\":{\"width\":2},\"mode\":\"lines+markers\",\"name\":\"Depression\",\"visible\":false,\"x\":[\"2024-11-09\",\"2024-11-10\",\"2024-11-11\",\"2024-11-12\",\"2024-11-13\",\"2024-11-14\",\"2024-11-15\",\"2024-11-16\",\"2024-11-17\",\"2024-11-18\",\"2024-11-19\",\"2024-11-20\",\"2024-11-21\",\"2024-11-22\",\"2024-11-23\",\"2024-11-24\",\"2024-11-25\",\"2024-11-26\",\"2024-11-27\",\"2024-11-28\",\"2024-11-29\",\"2024-11-30\",\"2024-12-01\",\"2024-12-02\",\"2024-12-03\",\"2024-12-04\",\"2024-12-05\",\"2024-12-06\"],\"y\":[null,null,5.0,7.0,5.0,7.0,null,null,null,null,7.0,null,null,null,null,null,2.0,null,null,null,null,null,null,8.0,9.0,7.0,5.0,null],\"type\":\"scatter\",\"xaxis\":\"x\",\"yaxis\":\"y2\"},{\"connectgaps\":true,\"mode\":\"lines+markers\",\"name\":\"Anxiety\",\"visible\":false,\"x\":[\"2024-11-09\",\"2024-11-10\",\"2024-11-11\",\"2024-11-12\",\"2024-11-13\",\"2024-11-14\",\"2024-11-15\",\"2024-11-16\",\"2024-11-17\",\"2024-11-18\",\"2024-11-19\",\"2024-11-20\",\"2024-11-21\",\"2024-11-22\",\"2024-11-23\",\"2024-11-24\",\"2024-11-25\",\"2024-11-26\",\"2024-11-27\",\"2024-11-28\",\"2024-11-29\",\"2024-11-30\",\"2024-12-01\",\"2024-12-02\",\"2024-12-03\",\"2024-12-04\",\"2024-12-05\",\"2024-12-06\"],\"y\":[null,null,7.0,3.0,9.0,5.0,null,null,null,null,6.0,null,null,null,null,null,10.0,null,null,null,null,null,null,3.0,4.0,3.0,8.0,null],\"type\":\"scatter\",\"xaxis\":\"x\",\"yaxis\":\"y2\"},{\"connectgaps\":true,\"mode\":\"lines+markers\",\"name\":\"Difficulty Functioning\",\"visible\":false,\"x\":[\"2024-11-09\",\"2024-11-10\",\"2024-11-11\",\"2024-11-12\",\"2024-11-13\",\"2024-11-14\",\"2024-11-15\",\"2024-11-16\",\"2024-11-17\",\"2024-11-18\",\"2024-11-19\",\"2024-11-20\",\"2024-11-21\",\"2024-11-22\",\"2024-11-23\",\"2024-11-24\",\"2024-11-25\",\"2024-11-26\",\"2024-11-27\",\"2024-11-28\",\"2024-11-29\",\"2024-11-30\",\"2024-12-01\",\"2024-12-02\",\"2024-12-03\",\"2024-12-04\",\"2024-12-05\",\"2024-12-06\"],\"y\":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0.0,1.0,null],\"type\":\"scatter\",\"xaxis\":\"x\",\"yaxis\":\"y2\"},{\"marker\":{\"color\":\"#CCFF99\"},\"name\":\"Entropy\",\"visible\":false,\"x\":[\"2024-11-09\",\"2024-11-10\",\"2024-11-11\",\"2024-11-12\",\"2024-11-13\",\"2024-11-14\",\"2024-11-15\",\"2024-11-16\",\"2024-11-17\",\"2024-11-18\",\"2024-11-19\",\"2024-11-20\",\"2024-11-21\",\"2024-11-22\",\"2024-11-23\",\"2024-11-24\",\"2024-11-25\",\"2024-11-26\",\"2024-11-27\",\"2024-11-28\",\"2024-11-29\",\"2024-11-30\",\"2024-12-01\",\"2024-12-02\",\"2024-12-03\",\"2024-12-04\",\"2024-12-05\",\"2024-12-06\"],\"y\":[null,null,0.4888568403277253,0.17209036080924073,null,0.6860771796515455,0.6293374713557213,0.7402797992778162,0.2476630722857764,1.0251910148490686,0.7716488793411393,0.06311402240719631,0.3204570549552286,0.5864317076384609,null,null,1.0448595400375815,null,null,null,null,null,null,0.2730253805719647,0.41875920816032375,0.23341702231050435,0.24358339836865392,0.6693503602453091],\"type\":\"bar\",\"xaxis\":\"x\",\"yaxis\":\"y\"},{\"connectgaps\":true,\"line\":{\"width\":2},\"mode\":\"lines+markers\",\"name\":\"Depression\",\"visible\":false,\"x\":[\"2024-11-09\",\"2024-11-10\",\"2024-11-11\",\"2024-11-12\",\"2024-11-13\",\"2024-11-14\",\"2024-11-15\",\"2024-11-16\",\"2024-11-17\",\"2024-11-18\",\"2024-11-19\",\"2024-11-20\",\"2024-11-21\",\"2024-11-22\",\"2024-11-23\",\"2024-11-24\",\"2024-11-25\",\"2024-11-26\",\"2024-11-27\",\"2024-11-28\",\"2024-11-29\",\"2024-11-30\",\"2024-12-01\",\"2024-12-02\",\"2024-12-03\",\"2024-12-04\",\"2024-12-05\",\"2024-12-06\"],\"y\":[null,null,5.0,7.0,5.0,7.0,null,null,null,null,7.0,null,null,null,null,null,2.0,null,null,null,null,null,null,8.0,9.0,7.0,5.0,null],\"type\":\"scatter\",\"xaxis\":\"x\",\"yaxis\":\"y2\"},{\"connectgaps\":true,\"mode\":\"lines+markers\",\"name\":\"Anxiety\",\"visible\":false,\"x\":[\"2024-11-09\",\"2024-11-10\",\"2024-11-11\",\"2024-11-12\",\"2024-11-13\",\"2024-11-14\",\"2024-11-15\",\"2024-11-16\",\"2024-11-17\",\"2024-11-18\",\"2024-11-19\",\"2024-11-20\",\"2024-11-21\",\"2024-11-22\",\"2024-11-23\",\"2024-11-24\",\"2024-11-25\",\"2024-11-26\",\"2024-11-27\",\"2024-11-28\",\"2024-11-29\",\"2024-11-30\",\"2024-12-01\",\"2024-12-02\",\"2024-12-03\",\"2024-12-04\",\"2024-12-05\",\"2024-12-06\"],\"y\":[null,null,7.0,3.0,9.0,5.0,null,null,null,null,6.0,null,null,null,null,null,10.0,null,null,null,null,null,null,3.0,4.0,3.0,8.0,null],\"type\":\"scatter\",\"xaxis\":\"x\",\"yaxis\":\"y2\"},{\"connectgaps\":true,\"mode\":\"lines+markers\",\"name\":\"Difficulty Functioning\",\"visible\":false,\"x\":[\"2024-11-09\",\"2024-11-10\",\"2024-11-11\",\"2024-11-12\",\"2024-11-13\",\"2024-11-14\",\"2024-11-15\",\"2024-11-16\",\"2024-11-17\",\"2024-11-18\",\"2024-11-19\",\"2024-11-20\",\"2024-11-21\",\"2024-11-22\",\"2024-11-23\",\"2024-11-24\",\"2024-11-25\",\"2024-11-26\",\"2024-11-27\",\"2024-11-28\",\"2024-11-29\",\"2024-11-30\",\"2024-12-01\",\"2024-12-02\",\"2024-12-03\",\"2024-12-04\",\"2024-12-05\",\"2024-12-06\"],\"y\":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0.0,1.0,null],\"type\":\"scatter\",\"xaxis\":\"x\",\"yaxis\":\"y2\"},{\"marker\":{\"color\":\"#FFCC99\"},\"name\":\"Sleep Duration\",\"visible\":false,\"x\":[\"2024-11-09\",\"2024-11-10\",\"2024-11-11\",\"2024-11-12\",\"2024-11-13\",\"2024-11-14\",\"2024-11-15\",\"2024-11-16\",\"2024-11-17\",\"2024-11-18\",\"2024-11-19\",\"2024-11-20\",\"2024-11-21\",\"2024-11-22\",\"2024-11-23\",\"2024-11-24\",\"2024-11-25\",\"2024-11-26\",\"2024-11-27\",\"2024-11-28\",\"2024-11-29\",\"2024-11-30\",\"2024-12-01\",\"2024-12-02\",\"2024-12-03\",\"2024-12-04\",\"2024-12-05\",\"2024-12-06\"],\"y\":[null,null,8.25,8.0,null,7.75,null,null,null,null,7.0,null,null,null,null,null,2.0,null,null,null,null,null,null,7.5,7.5,null,7.75,null],\"type\":\"bar\",\"xaxis\":\"x\",\"yaxis\":\"y\"},{\"connectgaps\":true,\"line\":{\"width\":2},\"mode\":\"lines+markers\",\"name\":\"Depression\",\"visible\":false,\"x\":[\"2024-11-09\",\"2024-11-10\",\"2024-11-11\",\"2024-11-12\",\"2024-11-13\",\"2024-11-14\",\"2024-11-15\",\"2024-11-16\",\"2024-11-17\",\"2024-11-18\",\"2024-11-19\",\"2024-11-20\",\"2024-11-21\",\"2024-11-22\",\"2024-11-23\",\"2024-11-24\",\"2024-11-25\",\"2024-11-26\",\"2024-11-27\",\"2024-11-28\",\"2024-11-29\",\"2024-11-30\",\"2024-12-01\",\"2024-12-02\",\"2024-12-03\",\"2024-12-04\",\"2024-12-05\",\"2024-12-06\"],\"y\":[null,null,5.0,7.0,5.0,7.0,null,null,null,null,7.0,null,null,null,null,null,2.0,null,null,null,null,null,null,8.0,9.0,7.0,5.0,null],\"type\":\"scatter\",\"xaxis\":\"x\",\"yaxis\":\"y2\"},{\"connectgaps\":true,\"mode\":\"lines+markers\",\"name\":\"Anxiety\",\"visible\":false,\"x\":[\"2024-11-09\",\"2024-11-10\",\"2024-11-11\",\"2024-11-12\",\"2024-11-13\",\"2024-11-14\",\"2024-11-15\",\"2024-11-16\",\"2024-11-17\",\"2024-11-18\",\"2024-11-19\",\"2024-11-20\",\"2024-11-21\",\"2024-11-22\",\"2024-11-23\",\"2024-11-24\",\"2024-11-25\",\"2024-11-26\",\"2024-11-27\",\"2024-11-28\",\"2024-11-29\",\"2024-11-30\",\"2024-12-01\",\"2024-12-02\",\"2024-12-03\",\"2024-12-04\",\"2024-12-05\",\"2024-12-06\"],\"y\":[null,null,7.0,3.0,9.0,5.0,null,null,null,null,6.0,null,null,null,null,null,10.0,null,null,null,null,null,null,3.0,4.0,3.0,8.0,null],\"type\":\"scatter\",\"xaxis\":\"x\",\"yaxis\":\"y2\"},{\"connectgaps\":true,\"mode\":\"lines+markers\",\"name\":\"Difficulty Functioning\",\"visible\":false,\"x\":[\"2024-11-09\",\"2024-11-10\",\"2024-11-11\",\"2024-11-12\",\"2024-11-13\",\"2024-11-14\",\"2024-11-15\",\"2024-11-16\",\"2024-11-17\",\"2024-11-18\",\"2024-11-19\",\"2024-11-20\",\"2024-11-21\",\"2024-11-22\",\"2024-11-23\",\"2024-11-24\",\"2024-11-25\",\"2024-11-26\",\"2024-11-27\",\"2024-11-28\",\"2024-11-29\",\"2024-11-30\",\"2024-12-01\",\"2024-12-02\",\"2024-12-03\",\"2024-12-04\",\"2024-12-05\",\"2024-12-06\"],\"y\":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0.0,1.0,null],\"type\":\"scatter\",\"xaxis\":\"x\",\"yaxis\":\"y2\"},{\"marker\":{\"color\":\"#FF9999\"},\"name\":\"Steps\",\"visible\":false,\"x\":[\"2024-11-09\",\"2024-11-10\",\"2024-11-11\",\"2024-11-12\",\"2024-11-13\",\"2024-11-14\",\"2024-11-15\",\"2024-11-16\",\"2024-11-17\",\"2024-11-18\",\"2024-11-19\",\"2024-11-20\",\"2024-11-21\",\"2024-11-22\",\"2024-11-23\",\"2024-11-24\",\"2024-11-25\",\"2024-11-26\",\"2024-11-27\",\"2024-11-28\",\"2024-11-29\",\"2024-11-30\",\"2024-12-01\",\"2024-12-02\",\"2024-12-03\",\"2024-12-04\",\"2024-12-05\",\"2024-12-06\"],\"y\":[13628.0,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],\"type\":\"bar\",\"xaxis\":\"x\",\"yaxis\":\"y\"},{\"connectgaps\":true,\"line\":{\"width\":2},\"mode\":\"lines+markers\",\"name\":\"Depression\",\"visible\":false,\"x\":[\"2024-11-09\",\"2024-11-10\",\"2024-11-11\",\"2024-11-12\",\"2024-11-13\",\"2024-11-14\",\"2024-11-15\",\"2024-11-16\",\"2024-11-17\",\"2024-11-18\",\"2024-11-19\",\"2024-11-20\",\"2024-11-21\",\"2024-11-22\",\"2024-11-23\",\"2024-11-24\",\"2024-11-25\",\"2024-11-26\",\"2024-11-27\",\"2024-11-28\",\"2024-11-29\",\"2024-11-30\",\"2024-12-01\",\"2024-12-02\",\"2024-12-03\",\"2024-12-04\",\"2024-12-05\",\"2024-12-06\"],\"y\":[null,null,5.0,7.0,5.0,7.0,null,null,null,null,7.0,null,null,null,null,null,2.0,null,null,null,null,null,null,8.0,9.0,7.0,5.0,null],\"type\":\"scatter\",\"xaxis\":\"x\",\"yaxis\":\"y2\"},{\"connectgaps\":true,\"mode\":\"lines+markers\",\"name\":\"Anxiety\",\"visible\":false,\"x\":[\"2024-11-09\",\"2024-11-10\",\"2024-11-11\",\"2024-11-12\",\"2024-11-13\",\"2024-11-14\",\"2024-11-15\",\"2024-11-16\",\"2024-11-17\",\"2024-11-18\",\"2024-11-19\",\"2024-11-20\",\"2024-11-21\",\"2024-11-22\",\"2024-11-23\",\"2024-11-24\",\"2024-11-25\",\"2024-11-26\",\"2024-11-27\",\"2024-11-28\",\"2024-11-29\",\"2024-11-30\",\"2024-12-01\",\"2024-12-02\",\"2024-12-03\",\"2024-12-04\",\"2024-12-05\",\"2024-12-06\"],\"y\":[null,null,7.0,3.0,9.0,5.0,null,null,null,null,6.0,null,null,null,null,null,10.0,null,null,null,null,null,null,3.0,4.0,3.0,8.0,null],\"type\":\"scatter\",\"xaxis\":\"x\",\"yaxis\":\"y2\"},{\"connectgaps\":true,\"mode\":\"lines+markers\",\"name\":\"Difficulty Functioning\",\"visible\":false,\"x\":[\"2024-11-09\",\"2024-11-10\",\"2024-11-11\",\"2024-11-12\",\"2024-11-13\",\"2024-11-14\",\"2024-11-15\",\"2024-11-16\",\"2024-11-17\",\"2024-11-18\",\"2024-11-19\",\"2024-11-20\",\"2024-11-21\",\"2024-11-22\",\"2024-11-23\",\"2024-11-24\",\"2024-11-25\",\"2024-11-26\",\"2024-11-27\",\"2024-11-28\",\"2024-11-29\",\"2024-11-30\",\"2024-12-01\",\"2024-12-02\",\"2024-12-03\",\"2024-12-04\",\"2024-12-05\",\"2024-12-06\"],\"y\":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0.0,1.0,null],\"type\":\"scatter\",\"xaxis\":\"x\",\"yaxis\":\"y2\"}],                        {\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"type\":\"scattergl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"bgcolor\":\"#E5ECF6\",\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"#E5ECF6\",\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"subunitcolor\":\"white\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"white\"},\"title\":{\"x\":0.05},\"mapbox\":{\"style\":\"light\"}}},\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,0.94]},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"\\u003cb\\u003eTime\\u002fNumber\\u003c\\u002fb\\u003e\"}},\"yaxis2\":{\"anchor\":\"x\",\"overlaying\":\"y\",\"side\":\"right\",\"title\":{\"text\":\"\\u003cb\\u003eSurvey Score\\u003c\\u002fb\\u003e\"}},\"title\":{\"text\":\"Daily Scores\"},\"updatemenus\":[{\"buttons\":[{\"args\":[{\"visible\":[true,true,true,true,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false]},{\"title\":\"Screentime\"}],\"label\":\"Screentime\",\"method\":\"update\"},{\"args\":[{\"visible\":[false,false,false,false,true,true,true,true,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false]},{\"title\":\"Hometime\"}],\"label\":\"Hometime\",\"method\":\"update\"},{\"args\":[{\"visible\":[false,false,false,false,false,false,false,false,true,true,true,true,false,false,false,false,false,false,false,false,false,false,false,false]},{\"title\":\"Entropy\"}],\"label\":\"Entropy\",\"method\":\"update\"},{\"args\":[{\"visible\":[false,false,false,false,false,false,false,false,false,false,false,false,true,true,true,true,false,false,false,false,false,false,false,false]},{\"title\":\"Sleep Duration\"}],\"label\":\"Sleep Duration\",\"method\":\"update\"},{\"args\":[{\"visible\":[false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,true,true,true,true,false,false,false,false]},{\"title\":\"Steps\"}],\"label\":\"Steps\",\"method\":\"update\"}],\"showactive\":true,\"type\":\"dropdown\",\"x\":1.3,\"y\":0.5}]},                        {\"responsive\": true}                    ).then(function(){\n",
       "                            \n",
       "var gd = document.getElementById('2f9aa161-932d-4b79-996b-f3eeb49d08ff');\n",
>>>>>>> refs/remotes/origin/main
       "var x = new MutationObserver(function (mutations, observer) {{\n",
       "        var display = window.getComputedStyle(gd).display;\n",
       "        if (!display || display === 'none') {{\n",
       "            console.log([gd, 'removed!']);\n",
       "            Plotly.purge(gd);\n",
       "            observer.disconnect();\n",
       "        }}\n",
       "}});\n",
       "\n",
       "// Listen for the removal of the full notebook cells\n",
       "var notebookContainer = gd.closest('#notebook-container');\n",
       "if (notebookContainer) {{\n",
       "    x.observe(notebookContainer, {childList: true});\n",
       "}}\n",
       "\n",
       "// Listen for the clearing of the current output cell\n",
       "var outputEl = gd.closest('.output');\n",
       "if (outputEl) {{\n",
       "    x.observe(outputEl, {childList: true});\n",
       "}}\n",
       "\n",
       "                        })                };                });            </script>        </div>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from plotly.subplots import make_subplots\n",
    "import plotly.graph_objects as go\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "from datetime import datetime\n",
    "\n",
    "# Assuming passive_df is already defined and populated with your data\n",
    "\n",
    "def generate_visibility(option_position, total_options, traces_per_option):\n",
    "    return [True if i // traces_per_option == option_position else False for i in range(total_options * traces_per_option)]\n",
    "\n",
    "x = passive_df['date']\n",
    "\n",
    "# Handle missing columns by filling NaN values\n",
    "sleep_duration = passive_df['sleep_duration_hours'].fillna(np.nan).tolist() if 'sleep_duration_hours' in passive_df else [np.nan] * len(passive_df)\n",
    "dep_line = passive_df['depression'].fillna(np.nan).tolist() if 'depression' in passive_df else [np.nan] * len(passive_df)\n",
    "anx_line = passive_df['anxiety'].fillna(np.nan).tolist() if 'anxiety' in passive_df else [np.nan] * len(passive_df)\n",
    "fxn_line = passive_df['dysfunction'].fillna(np.nan).tolist() if 'dysfunction' in passive_df else [np.nan] * len(passive_df)\n",
    "steps_line = passive_df['steps'].fillna(np.nan).tolist() if 'steps' in passive_df else [np.nan] * len(passive_df)\n",
    "\n",
    "# Create figure with secondary y-axis\n",
    "fig = make_subplots(specs=[[{\"secondary_y\": True}]])\n",
    "\n",
    "# OPTION 1 = Screentime\n",
    "fig.add_trace(go.Bar(x=x, y=passive_df['screen_duration'], visible=True, marker=dict(color='#CCE5FF'), name='Screentime'), secondary_y=False)\n",
    "fig.add_trace(go.Scatter(x=x, y=dep_line, mode='lines+markers', connectgaps=True, line=dict(width=2), visible=True, name='Depression'), secondary_y=True)\n",
    "fig.add_trace(go.Scatter(x=x, y=anx_line, mode='lines+markers', connectgaps=True, visible=True, name='Anxiety'), secondary_y=True)\n",
    "fig.add_trace(go.Scatter(x=x, y=fxn_line, mode='lines+markers', connectgaps=True, visible=True, name='Difficulty Functioning'), secondary_y=True)\n",
    "\n",
    "# OPTION 2 = Hometime\n",
    "fig.add_trace(go.Bar(x=x, y=passive_df['hometime'], visible=False, marker=dict(color='#CCCCFF'), name='Hometime'), secondary_y=False)\n",
    "fig.add_trace(go.Scatter(x=x, y=dep_line, mode='lines+markers', connectgaps=True, line=dict(width=2), visible=False, name='Depression'), secondary_y=True)\n",
    "fig.add_trace(go.Scatter(x=x, y=anx_line, mode='lines+markers', connectgaps=True, visible=False, name='Anxiety'), secondary_y=True)\n",
    "fig.add_trace(go.Scatter(x=x, y=fxn_line, mode='lines+markers', connectgaps=True, visible=False, name='Difficulty Functioning'), secondary_y=True)\n",
    "\n",
    "# OPTION 3 = Entropy\n",
    "fig.add_trace(go.Bar(x=x, y=passive_df['entropy'], visible=False, marker=dict(color='#CCFF99'), name='Entropy'), secondary_y=False)\n",
    "fig.add_trace(go.Scatter(x=x, y=dep_line, mode='lines+markers', connectgaps=True, line=dict(width=2), visible=False, name='Depression'), secondary_y=True)\n",
    "fig.add_trace(go.Scatter(x=x, y=anx_line, mode='lines+markers', connectgaps=True, visible=False, name='Anxiety'), secondary_y=True)\n",
    "fig.add_trace(go.Scatter(x=x, y=fxn_line, mode='lines+markers', connectgaps=True, visible=False, name='Difficulty Functioning'), secondary_y=True)\n",
    "\n",
    "# OPTION 4 = Sleep Duration\n",
    "fig.add_trace(go.Bar(x=x, y=sleep_duration, visible=False, marker=dict(color='#FFCC99'), name='Sleep Duration'), secondary_y=False)\n",
    "fig.add_trace(go.Scatter(x=x, y=dep_line, mode='lines+markers', connectgaps=True, line=dict(width=2), visible=False,name='Depression'), secondary_y=True)\n",
    "fig.add_trace(go.Scatter(x=x,y=anx_line , mode='lines+markers' , connectgaps=True , visible=False , name='Anxiety') , secondary_y=True)\n",
    "fig.add_trace(go.Scatter(x=x,y=fxn_line , mode='lines+markers' , connectgaps=True , visible=False , name='Difficulty Functioning') , secondary_y=True)\n",
    "\n",
    "# OPTION 5 = Steps\n",
    "fig.add_trace(go.Bar(x=x,y=steps_line , visible=False , marker=dict(color='#FF9999') , name='Steps') , secondary_y=False)\n",
    "fig.add_trace(go.Scatter(x=x,y=dep_line , mode='lines+markers' , connectgaps=True , line=dict(width=2), visible=False , name='Depression') , secondary_y=True)\n",
    "fig.add_trace(go.Scatter(x=x,y=anx_line , mode='lines+markers' , connectgaps=True , visible=False , name='Anxiety') , secondary_y=True)\n",
    "fig.add_trace(go.Scatter(x=x,y=fxn_line , mode='lines+markers' , connectgaps=True , visible=False , name='Difficulty Functioning') , secondary_y=True)\n",
    "\n",
    "# Update dropdown menu to include Steps\n",
    "try:\n",
    "    fig.update_layout(\n",
    "        title='Daily Scores', \n",
    "        updatemenus=[\n",
    "            dict(\n",
    "                type=\"dropdown\",\n",
    "                x=1.3,\n",
    "                y=0.5,\n",
    "                showactive=True,\n",
    "                buttons=list([\n",
    "                    dict(label=\"Screentime\",\n",
    "                         method=\"update\",\n",
    "                         args=[{\"visible\": generate_visibility(0, 6, 4)},\n",
    "                               {\"title\": \"Screentime\"}]),\n",
    "                    dict(label=\"Hometime\",\n",
    "                         method=\"update\",\n",
    "                         args=[{\"visible\": generate_visibility(1, 6, 4)},\n",
    "                               {\"title\": \"Hometime\"}]),\n",
    "                    dict(label=\"Entropy\",\n",
    "                         method=\"update\",\n",
    "                         args=[{\"visible\": generate_visibility(2, 6, 4)},\n",
    "                               {\"title\": \"Entropy\"}]),\n",
    "                    dict(label=\"Sleep Duration\",\n",
    "                         method=\"update\",\n",
    "                         args=[{\"visible\": generate_visibility(3, 6, 4)},\n",
    "                               {\"title\": \"Sleep Duration\"}]),\n",
    "                    dict(label=\"Steps\",\n",
    "                         method=\"update\",\n",
    "                         args=[{\"visible\": generate_visibility(4, 6 ,4)},\n",
    "                               {\"title\": \"Steps\"}])\n",
    "                ]),\n",
    "            )\n",
    "        ])\n",
    "\n",
    "except Exception as e:\n",
    "    print(f\"Error: {e}\")\n",
    "\n",
    "# Set y-axes titles\n",
    "fig.update_yaxes(title_text=\"<b>Survey Score</b>\", secondary_y=True)\n",
    "fig.update_yaxes(title_text=\"<b>Time/Number</b>\", secondary_y=False)\n",
    "\n",
    "# Show the figure\n",
    "fig.show()"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 19,
=======
   "execution_count": 18,
>>>>>>> refs/remotes/origin/main
   "id": "db60c133-a0dd-42e2-8ea6-9b4e620d1f1d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fewer than 2 Daily Functioning surveys found\n"
     ]
    }
   ],
   "source": [
    "# These are the print messages from above for indicating if there are too few surveys\n",
    "for message in messages:\n",
    "    print(message)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dd9a1a57-c0e8-4b80-bf96-aabb80141a24",
   "metadata": {},
   "source": [
    "# Relationships between daily activity and well-being\n",
    "Below, you'll find a graphic called a correlation matrix which shows how your activity relates to your well-being.   \n",
    "\n",
    "Each box in the chart has a number that tells you if two things increase together (positive numbers, more dark blue), decrease together (negative numbers, lighter yellow green), or don't affect each other (zero).  Numbers close to 1 or -1 mean a strong relationship and numbers closer to 0 mean no relationship.\n",
    "\n",
    "How would you use this information?  Maybe you see a negative -0.85 correlation between difficulty functioning and sleep. A negative correlation tells you on days when your sleep is lower, your difficulty functioning tends to be higher.  \n",
    "\n",
    "Questions to think about: How does going on a walk make you feel? Do you usually feel better, worse, or about the same after you go on walks?"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 20,
=======
   "execution_count": 19,
>>>>>>> refs/remotes/origin/main
   "id": "2b4abfd7-cfdd-49ad-9a8d-0cceb72c0655",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
<<<<<<< HEAD
       "<div id=\"altair-viz-6b339e6c9d8a49faa6bac6a202b92f9f\"></div>\n",
=======
       "<div id=\"altair-viz-cbcd0582d5c2414ea40a6ec2b23bd279\"></div>\n",
>>>>>>> refs/remotes/origin/main
       "<script type=\"text/javascript\">\n",
       "  var VEGA_DEBUG = (typeof VEGA_DEBUG == \"undefined\") ? {} : VEGA_DEBUG;\n",
       "  (function(spec, embedOpt){\n",
       "    let outputDiv = document.currentScript.previousElementSibling;\n",
<<<<<<< HEAD
       "    if (outputDiv.id !== \"altair-viz-6b339e6c9d8a49faa6bac6a202b92f9f\") {\n",
       "      outputDiv = document.getElementById(\"altair-viz-6b339e6c9d8a49faa6bac6a202b92f9f\");\n",
=======
       "    if (outputDiv.id !== \"altair-viz-cbcd0582d5c2414ea40a6ec2b23bd279\") {\n",
       "      outputDiv = document.getElementById(\"altair-viz-cbcd0582d5c2414ea40a6ec2b23bd279\");\n",
>>>>>>> refs/remotes/origin/main
       "    }\n",
       "    const paths = {\n",
       "      \"vega\": \"https://cdn.jsdelivr.net/npm//vega@5?noext\",\n",
       "      \"vega-lib\": \"https://cdn.jsdelivr.net/npm//vega-lib?noext\",\n",
       "      \"vega-lite\": \"https://cdn.jsdelivr.net/npm//vega-lite@4.17.0?noext\",\n",
       "      \"vega-embed\": \"https://cdn.jsdelivr.net/npm//vega-embed@6?noext\",\n",
       "    };\n",
       "\n",
       "    function maybeLoadScript(lib, version) {\n",
       "      var key = `${lib.replace(\"-\", \"\")}_version`;\n",
       "      return (VEGA_DEBUG[key] == version) ?\n",
       "        Promise.resolve(paths[lib]) :\n",
       "        new Promise(function(resolve, reject) {\n",
       "          var s = document.createElement('script');\n",
       "          document.getElementsByTagName(\"head\")[0].appendChild(s);\n",
       "          s.async = true;\n",
       "          s.onload = () => {\n",
       "            VEGA_DEBUG[key] = version;\n",
       "            return resolve(paths[lib]);\n",
       "          };\n",
       "          s.onerror = () => reject(`Error loading script: ${paths[lib]}`);\n",
       "          s.src = paths[lib];\n",
       "        });\n",
       "    }\n",
       "\n",
       "    function showError(err) {\n",
       "      outputDiv.innerHTML = `<div class=\"error\" style=\"color:red;\">${err}</div>`;\n",
       "      throw err;\n",
       "    }\n",
       "\n",
       "    function displayChart(vegaEmbed) {\n",
       "      vegaEmbed(outputDiv, spec, embedOpt)\n",
       "        .catch(err => showError(`Javascript Error: ${err.message}<br>This usually means there's a typo in your chart specification. See the javascript console for the full traceback.`));\n",
       "    }\n",
       "\n",
       "    if(typeof define === \"function\" && define.amd) {\n",
       "      requirejs.config({paths});\n",
       "      require([\"vega-embed\"], displayChart, err => showError(`Error loading script: ${err.message}`));\n",
       "    } else {\n",
       "      maybeLoadScript(\"vega\", \"5\")\n",
       "        .then(() => maybeLoadScript(\"vega-lite\", \"4.17.0\"))\n",
       "        .then(() => maybeLoadScript(\"vega-embed\", \"6\"))\n",
       "        .catch(showError)\n",
       "        .then(() => displayChart(vegaEmbed));\n",
       "    }\n",
<<<<<<< HEAD
       "  })({\"config\": {\"view\": {\"continuousWidth\": 400, \"continuousHeight\": 300}}, \"layer\": [{\"mark\": \"rect\", \"encoding\": {\"color\": {\"field\": \"correlation\", \"type\": \"quantitative\"}, \"x\": {\"field\": \"variable2\", \"type\": \"ordinal\"}, \"y\": {\"field\": \"variable\", \"type\": \"ordinal\"}}, \"height\": 200, \"transform\": [{\"filter\": \"(datum.variable > datum.variable2)\"}], \"width\": 300}, {\"mark\": \"text\", \"encoding\": {\"color\": {\"condition\": {\"value\": \"white\", \"test\": \"(datum.correlation > 0.5)\"}, \"value\": \"black\"}, \"text\": {\"field\": \"correlation_label\", \"type\": \"nominal\"}, \"x\": {\"field\": \"variable2\", \"type\": \"ordinal\"}, \"y\": {\"field\": \"variable\", \"type\": \"ordinal\"}}, \"transform\": [{\"filter\": \"(datum.variable > datum.variable2)\"}]}], \"data\": {\"name\": \"data-bf315ca2cd27d52d1aced6f28ded6a7b\"}, \"$schema\": \"https://vega.github.io/schema/vega-lite/v4.17.0.json\", \"datasets\": {\"data-bf315ca2cd27d52d1aced6f28ded6a7b\": [{\"variable\": \"screen_duration\", \"variable2\": \"entropy\", \"correlation\": -0.5104516438666921, \"correlation_label\": \"-0.51\"}, {\"variable\": \"screen_duration\", \"variable2\": \"data_quality\", \"correlation\": 0.8333034486007483, \"correlation_label\": \"0.83\"}, {\"variable\": \"screen_duration\", \"variable2\": \"hometime\", \"correlation\": 0.5748560866313226, \"correlation_label\": \"0.57\"}, {\"variable\": \"screen_duration\", \"variable2\": \"anxiety\", \"correlation\": -0.451842427134572, \"correlation_label\": \"-0.45\"}, {\"variable\": \"screen_duration\", \"variable2\": \"depression\", \"correlation\": 0.5238944196049843, \"correlation_label\": \"0.52\"}, {\"variable\": \"screen_duration\", \"variable2\": \"sleep_duration_hours\", \"correlation\": 0.3090879064290151, \"correlation_label\": \"0.31\"}, {\"variable\": \"entropy\", \"variable2\": \"screen_duration\", \"correlation\": -0.5104516438666921, \"correlation_label\": \"-0.51\"}, {\"variable\": \"entropy\", \"variable2\": \"data_quality\", \"correlation\": -0.5559732425877979, \"correlation_label\": \"-0.56\"}, {\"variable\": \"entropy\", \"variable2\": \"hometime\", \"correlation\": -0.7079520134657756, \"correlation_label\": \"-0.71\"}, {\"variable\": \"entropy\", \"variable2\": \"anxiety\", \"correlation\": 0.6092625376613653, \"correlation_label\": \"0.61\"}, {\"variable\": \"entropy\", \"variable2\": \"depression\", \"correlation\": -0.5599160517981153, \"correlation_label\": \"-0.56\"}, {\"variable\": \"entropy\", \"variable2\": \"sleep_duration_hours\", \"correlation\": -0.7592924271523472, \"correlation_label\": \"-0.76\"}, {\"variable\": \"data_quality\", \"variable2\": \"screen_duration\", \"correlation\": 0.8333034486007483, \"correlation_label\": \"0.83\"}, {\"variable\": \"data_quality\", \"variable2\": \"entropy\", \"correlation\": -0.5559732425877979, \"correlation_label\": \"-0.56\"}, {\"variable\": \"data_quality\", \"variable2\": \"hometime\", \"correlation\": 0.8729134543578064, \"correlation_label\": \"0.87\"}, {\"variable\": \"data_quality\", \"variable2\": \"anxiety\", \"correlation\": -0.6320379720408943, \"correlation_label\": \"-0.63\"}, {\"variable\": \"data_quality\", \"variable2\": \"depression\", \"correlation\": 0.575039310780545, \"correlation_label\": \"0.58\"}, {\"variable\": \"data_quality\", \"variable2\": \"sleep_duration_hours\", \"correlation\": 0.35640869271669534, \"correlation_label\": \"0.36\"}, {\"variable\": \"hometime\", \"variable2\": \"screen_duration\", \"correlation\": 0.5748560866313226, \"correlation_label\": \"0.57\"}, {\"variable\": \"hometime\", \"variable2\": \"entropy\", \"correlation\": -0.7079520134657756, \"correlation_label\": \"-0.71\"}, {\"variable\": \"hometime\", \"variable2\": \"data_quality\", \"correlation\": 0.8729134543578064, \"correlation_label\": \"0.87\"}, {\"variable\": \"hometime\", \"variable2\": \"anxiety\", \"correlation\": -0.6083410022427951, \"correlation_label\": \"-0.61\"}, {\"variable\": \"hometime\", \"variable2\": \"depression\", \"correlation\": 0.5567705392853228, \"correlation_label\": \"0.56\"}, {\"variable\": \"hometime\", \"variable2\": \"sleep_duration_hours\", \"correlation\": 0.389058280521166, \"correlation_label\": \"0.39\"}, {\"variable\": \"anxiety\", \"variable2\": \"screen_duration\", \"correlation\": -0.451842427134572, \"correlation_label\": \"-0.45\"}, {\"variable\": \"anxiety\", \"variable2\": \"entropy\", \"correlation\": 0.6092625376613653, \"correlation_label\": \"0.61\"}, {\"variable\": \"anxiety\", \"variable2\": \"data_quality\", \"correlation\": -0.6320379720408943, \"correlation_label\": \"-0.63\"}, {\"variable\": \"anxiety\", \"variable2\": \"hometime\", \"correlation\": -0.6083410022427951, \"correlation_label\": \"-0.61\"}, {\"variable\": \"anxiety\", \"variable2\": \"depression\", \"correlation\": -0.8795940161197522, \"correlation_label\": \"-0.88\"}, {\"variable\": \"anxiety\", \"variable2\": \"sleep_duration_hours\", \"correlation\": -0.5869242984801892, \"correlation_label\": \"-0.59\"}, {\"variable\": \"depression\", \"variable2\": \"screen_duration\", \"correlation\": 0.5238944196049843, \"correlation_label\": \"0.52\"}, {\"variable\": \"depression\", \"variable2\": \"entropy\", \"correlation\": -0.5599160517981153, \"correlation_label\": \"-0.56\"}, {\"variable\": \"depression\", \"variable2\": \"data_quality\", \"correlation\": 0.575039310780545, \"correlation_label\": \"0.58\"}, {\"variable\": \"depression\", \"variable2\": \"hometime\", \"correlation\": 0.5567705392853228, \"correlation_label\": \"0.56\"}, {\"variable\": \"depression\", \"variable2\": \"anxiety\", \"correlation\": -0.8795940161197522, \"correlation_label\": \"-0.88\"}, {\"variable\": \"depression\", \"variable2\": \"sleep_duration_hours\", \"correlation\": 0.7615882673988975, \"correlation_label\": \"0.76\"}, {\"variable\": \"sleep_duration_hours\", \"variable2\": \"screen_duration\", \"correlation\": 0.3090879064290151, \"correlation_label\": \"0.31\"}, {\"variable\": \"sleep_duration_hours\", \"variable2\": \"entropy\", \"correlation\": -0.7592924271523472, \"correlation_label\": \"-0.76\"}, {\"variable\": \"sleep_duration_hours\", \"variable2\": \"data_quality\", \"correlation\": 0.35640869271669534, \"correlation_label\": \"0.36\"}, {\"variable\": \"sleep_duration_hours\", \"variable2\": \"hometime\", \"correlation\": 0.389058280521166, \"correlation_label\": \"0.39\"}, {\"variable\": \"sleep_duration_hours\", \"variable2\": \"anxiety\", \"correlation\": -0.5869242984801892, \"correlation_label\": \"-0.59\"}, {\"variable\": \"sleep_duration_hours\", \"variable2\": \"depression\", \"correlation\": 0.7615882673988975, \"correlation_label\": \"0.76\"}]}}, {\"mode\": \"vega-lite\"});\n",
=======
       "  })({\"config\": {\"view\": {\"continuousWidth\": 400, \"continuousHeight\": 300}}, \"layer\": [{\"mark\": \"rect\", \"encoding\": {\"color\": {\"field\": \"correlation\", \"type\": \"quantitative\"}, \"x\": {\"field\": \"variable2\", \"type\": \"ordinal\"}, \"y\": {\"field\": \"variable\", \"type\": \"ordinal\"}}, \"height\": 200, \"transform\": [{\"filter\": \"(datum.variable > datum.variable2)\"}], \"width\": 300}, {\"mark\": \"text\", \"encoding\": {\"color\": {\"condition\": {\"value\": \"white\", \"test\": \"(datum.correlation > 0.5)\"}, \"value\": \"black\"}, \"text\": {\"field\": \"correlation_label\", \"type\": \"nominal\"}, \"x\": {\"field\": \"variable2\", \"type\": \"ordinal\"}, \"y\": {\"field\": \"variable\", \"type\": \"ordinal\"}}, \"transform\": [{\"filter\": \"(datum.variable > datum.variable2)\"}]}], \"data\": {\"name\": \"data-fd1303eac4cead74b45cad9dd0b4fe88\"}, \"$schema\": \"https://vega.github.io/schema/vega-lite/v4.17.0.json\", \"datasets\": {\"data-fd1303eac4cead74b45cad9dd0b4fe88\": [{\"variable\": \"screen_duration\", \"variable2\": \"entropy\", \"correlation\": -0.5104516438666921, \"correlation_label\": \"-0.51\"}, {\"variable\": \"screen_duration\", \"variable2\": \"data_quality\", \"correlation\": 0.8333034486007483, \"correlation_label\": \"0.83\"}, {\"variable\": \"screen_duration\", \"variable2\": \"hometime\", \"correlation\": 0.5748560866313226, \"correlation_label\": \"0.57\"}, {\"variable\": \"screen_duration\", \"variable2\": \"anxiety\", \"correlation\": -0.49246782331808653, \"correlation_label\": \"-0.49\"}, {\"variable\": \"screen_duration\", \"variable2\": \"depression\", \"correlation\": 0.44284628002679793, \"correlation_label\": \"0.44\"}, {\"variable\": \"screen_duration\", \"variable2\": \"sleep_duration_hours\", \"correlation\": 0.3090879064290151, \"correlation_label\": \"0.31\"}, {\"variable\": \"entropy\", \"variable2\": \"screen_duration\", \"correlation\": -0.5104516438666921, \"correlation_label\": \"-0.51\"}, {\"variable\": \"entropy\", \"variable2\": \"data_quality\", \"correlation\": -0.5559732425877979, \"correlation_label\": \"-0.56\"}, {\"variable\": \"entropy\", \"variable2\": \"hometime\", \"correlation\": -0.7079520134657756, \"correlation_label\": \"-0.71\"}, {\"variable\": \"entropy\", \"variable2\": \"anxiety\", \"correlation\": 0.6728724656237389, \"correlation_label\": \"0.67\"}, {\"variable\": \"entropy\", \"variable2\": \"depression\", \"correlation\": -0.5496219913112202, \"correlation_label\": \"-0.55\"}, {\"variable\": \"entropy\", \"variable2\": \"sleep_duration_hours\", \"correlation\": -0.7592924271523472, \"correlation_label\": \"-0.76\"}, {\"variable\": \"data_quality\", \"variable2\": \"screen_duration\", \"correlation\": 0.8333034486007483, \"correlation_label\": \"0.83\"}, {\"variable\": \"data_quality\", \"variable2\": \"entropy\", \"correlation\": -0.5559732425877979, \"correlation_label\": \"-0.56\"}, {\"variable\": \"data_quality\", \"variable2\": \"hometime\", \"correlation\": 0.8729134543578064, \"correlation_label\": \"0.87\"}, {\"variable\": \"data_quality\", \"variable2\": \"anxiety\", \"correlation\": -0.3526214084903049, \"correlation_label\": \"-0.35\"}, {\"variable\": \"data_quality\", \"variable2\": \"depression\", \"correlation\": 0.33256899645920024, \"correlation_label\": \"0.33\"}, {\"variable\": \"data_quality\", \"variable2\": \"sleep_duration_hours\", \"correlation\": 0.35640869271669534, \"correlation_label\": \"0.36\"}, {\"variable\": \"hometime\", \"variable2\": \"screen_duration\", \"correlation\": 0.5748560866313226, \"correlation_label\": \"0.57\"}, {\"variable\": \"hometime\", \"variable2\": \"entropy\", \"correlation\": -0.7079520134657756, \"correlation_label\": \"-0.71\"}, {\"variable\": \"hometime\", \"variable2\": \"data_quality\", \"correlation\": 0.8729134543578064, \"correlation_label\": \"0.87\"}, {\"variable\": \"hometime\", \"variable2\": \"anxiety\", \"correlation\": -0.40670121087825223, \"correlation_label\": \"-0.41\"}, {\"variable\": \"hometime\", \"variable2\": \"depression\", \"correlation\": 0.31778012749085977, \"correlation_label\": \"0.32\"}, {\"variable\": \"hometime\", \"variable2\": \"sleep_duration_hours\", \"correlation\": 0.389058280521166, \"correlation_label\": \"0.39\"}, {\"variable\": \"anxiety\", \"variable2\": \"screen_duration\", \"correlation\": -0.49246782331808653, \"correlation_label\": \"-0.49\"}, {\"variable\": \"anxiety\", \"variable2\": \"entropy\", \"correlation\": 0.6728724656237389, \"correlation_label\": \"0.67\"}, {\"variable\": \"anxiety\", \"variable2\": \"data_quality\", \"correlation\": -0.3526214084903049, \"correlation_label\": \"-0.35\"}, {\"variable\": \"anxiety\", \"variable2\": \"hometime\", \"correlation\": -0.40670121087825223, \"correlation_label\": \"-0.41\"}, {\"variable\": \"anxiety\", \"variable2\": \"depression\", \"correlation\": -0.8669831930302546, \"correlation_label\": \"-0.87\"}, {\"variable\": \"anxiety\", \"variable2\": \"sleep_duration_hours\", \"correlation\": -0.6613577099622796, \"correlation_label\": \"-0.66\"}, {\"variable\": \"depression\", \"variable2\": \"screen_duration\", \"correlation\": 0.44284628002679793, \"correlation_label\": \"0.44\"}, {\"variable\": \"depression\", \"variable2\": \"entropy\", \"correlation\": -0.5496219913112202, \"correlation_label\": \"-0.55\"}, {\"variable\": \"depression\", \"variable2\": \"data_quality\", \"correlation\": 0.33256899645920024, \"correlation_label\": \"0.33\"}, {\"variable\": \"depression\", \"variable2\": \"hometime\", \"correlation\": 0.31778012749085977, \"correlation_label\": \"0.32\"}, {\"variable\": \"depression\", \"variable2\": \"anxiety\", \"correlation\": -0.8669831930302546, \"correlation_label\": \"-0.87\"}, {\"variable\": \"depression\", \"variable2\": \"sleep_duration_hours\", \"correlation\": 0.7136503969372764, \"correlation_label\": \"0.71\"}, {\"variable\": \"sleep_duration_hours\", \"variable2\": \"screen_duration\", \"correlation\": 0.3090879064290151, \"correlation_label\": \"0.31\"}, {\"variable\": \"sleep_duration_hours\", \"variable2\": \"entropy\", \"correlation\": -0.7592924271523472, \"correlation_label\": \"-0.76\"}, {\"variable\": \"sleep_duration_hours\", \"variable2\": \"data_quality\", \"correlation\": 0.35640869271669534, \"correlation_label\": \"0.36\"}, {\"variable\": \"sleep_duration_hours\", \"variable2\": \"hometime\", \"correlation\": 0.389058280521166, \"correlation_label\": \"0.39\"}, {\"variable\": \"sleep_duration_hours\", \"variable2\": \"anxiety\", \"correlation\": -0.6613577099622796, \"correlation_label\": \"-0.66\"}, {\"variable\": \"sleep_duration_hours\", \"variable2\": \"depression\", \"correlation\": 0.7136503969372764, \"correlation_label\": \"0.71\"}]}}, {\"mode\": \"vega-lite\"});\n",
>>>>>>> refs/remotes/origin/main
       "</script>"
      ],
      "text/plain": [
       "alt.LayerChart(...)"
      ]
     },
<<<<<<< HEAD
     "execution_count": 20,
=======
     "execution_count": 19,
>>>>>>> refs/remotes/origin/main
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cor_matrix"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f9645334-8c9f-4fd6-a527-55ce7df7c7c7",
   "metadata": {},
   "source": [
    "# Calendar View"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b4cf33fd-f840-492b-8978-4dd2db22e820",
   "metadata": {},
   "source": [
    "These calendars show heatmaps of all of your passive and active variables collected over your time in the clinic. The month is listed on the bottom, the day of the week is shown on the right, and there is a heat map scale on the far right showing the minimum and maximum values for each variable with the corresponding colors. \n",
    "\n",
    "The goal of these graphs is to help pick up on patterns in passive or active data over time, as well as to pick out what days may have been unusual in terms of passive or active data values."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c229b065-864e-4d0e-b768-a009a47cd60f",
   "metadata": {},
   "source": [
    "### Entropy"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 21,
=======
   "execution_count": 20,
>>>>>>> refs/remotes/origin/main
   "id": "a7543e5b-fb0c-408a-ad87-495e64871b67",
   "metadata": {},
   "outputs": [
    {
     "data": {
<<<<<<< HEAD
      "image/png": "",
=======
      "image/png": "",
>>>>>>> refs/remotes/origin/main
      "text/plain": [
       "<Figure size 1250x170 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "final_df = plot_df\n",
    "entropy = final_df[['date', 'entropy']]\n",
    "\n",
    "entropy['date'] = pd.to_datetime(entropy['date'], yearfirst=True)\n",
    "entropy.set_index('date', inplace=True)\n",
    "\n",
    "# Check if there is any valid data (non-NaN values)\n",
    "if entropy['entropy'].notna().any():\n",
    "    # plot\n",
    "    col = 'entropy'\n",
    "    calplot.calplot(entropy[col], textfiller='-', dropzero=True)  # Corrected closing parenthesis\n",
    "else:\n",
    "    print('No data available for plotting')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c046392f-2392-4890-81df-f8b7b0f0600c",
   "metadata": {},
   "source": [
    "### Hometime"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 22,
=======
   "execution_count": 21,
>>>>>>> refs/remotes/origin/main
   "id": "896a06f4-a3e1-49b7-b47f-b3fe93273ac2",
   "metadata": {},
   "outputs": [
    {
     "data": {
<<<<<<< HEAD
      "image/png": "",
=======
      "image/png": "",
>>>>>>> refs/remotes/origin/main
      "text/plain": [
       "<Figure size 1250x170 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "hometime = final_df[['date', 'hometime']]\n",
    "\n",
    "hometime['date'] = pd.to_datetime(hometime['date'], yearfirst=True)\n",
    "hometime.set_index('date', inplace=True)\n",
    "# Check if there is any valid data (non-NaN values)\n",
    "if hometime['hometime'].notna().any():\n",
    "    # plot\n",
    "    col = 'hometime'\n",
    "    calplot.calplot(hometime[col], textfiller='-', dropzero=True);\n",
    "else:\n",
    "    print('No data available for plotting')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f45f5b99-5781-46d4-a4e0-847c0923b675",
   "metadata": {},
   "source": [
    "### Data Quality"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 23,
=======
   "execution_count": 22,
>>>>>>> refs/remotes/origin/main
   "id": "0d2b1eda-c3cf-4d59-b596-4440a7ee7371",
   "metadata": {},
   "outputs": [
    {
     "data": {
<<<<<<< HEAD
      "image/png": "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4h//+AdiYmKwf/9+tG7dGgCwevVqPPHEE3juuedw9913Y9KkSSgrKwMAdOjQAQsWLMCsWbPg5eVldGvw5mzhwoWy4YTh4eHYsmULNm3ahO7du2Pu3LlYuHCh0TCWJ554AoWFhSgvL2/2fwRJSUmBj48POnbsiLi4OOzevRsrV67E119/DbVabdJ7MDo6Gp9//jm2b9+OsLAw9O/fH4cOHbLwlZGtE8TbzTBETSouLg5BQUE21ZWbqDlLS0tDTEwMioqKOK7bDFlZWQgMDMThw4cRHh5u6XQahJ/PjYvt2zgGDRoEb29v/Oc//7F0Kk1u/vz52LZtm9FQHiIisl0comIlioqKsHfvXqSlpWHy5MmWToeIqEE0Gg0KCwvxxhtvoHfv3s26uMHP58bF9lVOeXk5EhMTERsbC7Vajc8++ww//vgjfvjhB0unRkRE1CRY4LASCQkJOHz4MF566SUMGzbM0ukQETXI3r17ERMTgy5duuCLL76wdDoNws/nxsX2VY6+y/iiRYtQUVGBrl27YuvWrXVOEElERGSLOESFiIiIiIiIiJo9TjJKRERERERERM0eCxxERERERERE1OyxwEFEREREREREzR4LHERERERERETU7LHAQURERERERETNHgscRERERERERNTsscBBRERERERERM0eCxxERERERERE1Oz9f/1Y3NcTjfAwAAAAAElFTkSuQmCC",
=======
      "image/png": "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mTMxYcIEREREoFevXli5ciUqKyulu6qMHz8eXbp0kSYpXbx4MXr37o2AgACUlpbivffew5UrVzB58uT68wsCXnnlFbz11lvo2rWrdJvYzp076zzMR+cZQj09PXH+/HnpNq7BwcFwcnLSNcwd3bx5E/v375duQ8t7XhMREREREZEpOTo6IiAgoNHtrY0g3lbg0KEHBwCMHj0aRUVFmD9/PgoKChAWFoa0tDRpktDc3FzIZP8bLFJSUoIpU6agoKAAbdu2Rc+ePbF//34EBwdL+7z22muorKzE888/j9LSUjz66KNIS0uDnZ2dTrnpXOAIDQ3F+fPnIQgCysvL8emnn2LEiBFaM542x/Xr17F582bU1tZCFEUIgoCQkBC94xIRERERERGR/j04AGD69OmYPn16o89lZGRorK9YsQIrVqy4e06CgMWLF2Px4sW6J6NG5wJHcHAwunTpgmvXrkEQBFy/fh1r165FcHAwwsLC4O3trdO8GaIo4urVqzhy5AhOnz4NlUol3VfY398f3t7euqZIRERERERERI0QlPWL+rql0LnAIQgCRo4ciXXr1qGqqgqCIECpVOLUqVM4deoUZDIZPDw80L59ezg7O8PBwQHW1tawsrKCKIqoq6vDrVu3cPPmTdy4cQOFhYXSnB4NvTZEUYSrqysSExMNfsFERERERERE9ytD9OAwVzoXOACgbdu2mDhxIrZu3YqioiJpvgxRFKFUKvHHH3/g2rVrTYolivUDfhp6bYiiiI4dO2Ls2LEGnduDiIiIiIiISFepqamNbr99KEaDhu+45kpQiRBUosa6pWhWgQMA2rdvj+effx779u3DwYMHpV4YDcWOBnf6z23Yr6GoIYoi7O3tERkZib59+8LKqtmpEREREREREVEj2IPjTgdbWSE6Ohp9+vTByZMncfbsWeTk5EChUNzz2IbCh5WVFby9vREUFITQ0FDY2NjokxIRERERERER3QELHPdgbW2N8PBwhIeHQxRFFBUV4fr16ygvL0dFRQUUCgWUSiXkcjlsbGxga2uLtm3bokOHDnBzczN6bw0HBwfGMHAMQ8VhDOPEsaQYhorDGMaJo0+MvLw8lJaWNvv43Nxcg+RhyBiGisMYxoljSTEMFYcxjBOHMYwTxxAxZB7n9I4R55OtdwxDtashrsdc/m/0iVFWVqb3+e8nLHDoQBAEdOzY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G1AqlXB3d9fY7u7ujoKCgiad/vXXX0fnzp01iiQJCQnYuHEj0tPTsXTpUvz666947LHHoFQq7xJJm95DVIiIiIiIiIgskZWVFVJTUzFlyhQkJycjPDwc0dHRGDNmDEJCQnSK9fbbbyM6OhoAMHv2bAwePBjV1dWws7MzRup3plQColrhQFX/OC8vD87OztJmW1tbg5/63XffxZYtW5CRkaFx3WPGjJEe9+jRAyEhIfD390dGRgb69+/f5PjswUFERERERER0ByNHjsS1a9ewc+dOJCQkICMjA+Hh4UhNTdUpjnpBpFOn+jv63GliTqO6wxAVZ2dnjaWxAkeHDh0gl8tRWFiosb2wsPCe82f861//wrvvvouffvrpnsUhPz8/dOjQARcuXNDp0ljgICIiIiIiIroLOzs7DBw4EPPmzcP+/fuRlJSEBQsWQCar/0qtfidQhULRaAxra2vpsSAIAABVM27RqjeVqDlERdX0u6jY2NigZ8+eSE9P/184lQrp6emIioq643HLli3Dm2++ibS0NERERNzzPFevXkVxcbFUCGoqFjiIiIiIiIiIdBAcHIzKykq4ubkBAPLz86Xn1CccNUtKpfaig5kzZ2Lt2rXYsGEDzpw5g2nTpqGyslK6q8r48eMxZ84caf+lS5di3rx5SElJgY+PDwoKClBQUICKigoAQEVFBWbNmoWDBw8iJycH6enpSExMREBAAOLj43XKjXNwEBERERERETWiuLgYTz75JCZNmoSQkBC0adMGR48exbJly5CYmAh7e3v07t0b7777Lnx9fXH9+nX885//NHXad6dSAVDdtt50o0ePRlFREebPn4+CggKEhYUhLS1Nmng0NzdX6tkCAGvWrEFtbS1GjRqlEWfBggVYuHAh5HI5Tpw4gQ0bNqC0tBSdO3fGoEGD8Oabb+o8DwgLHERERERERESNcHJyQmRkJFasWIGLFy9CoVDA09MTU6ZMwdy5cwEAKSkpeO6559CzZ08EBQVh2bJlGDRokIkzvzOxrg6i8L8ChCjW6Rxj+vTpmD59eqPPNdwet0FOTs5dY9nb2+PHH3/UOYfGsMBBRERERERE1AhbW1ssWbKk0VumNujevTv279+vsU19To6YmBiNdQAICwvT2tZilEpAUBuWIuo2RMWcscBBREREREREdJ8QlUqIagUOkQUOIiIiIiIiImp1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",
>>>>>>> refs/remotes/origin/main
      "text/plain": [
       "<Figure size 1250x170 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "data_quality = final_df[['date', 'data_quality']]\n",
    "\n",
    "data_quality['date'] = pd.to_datetime(data_quality['date'], yearfirst=True)\n",
    "data_quality.set_index('date', inplace=True)\n",
    "#plot\n",
    "# Check if there is any valid data (non-NaN values) or if not all values are 0\n",
    "if data_quality['data_quality'].notna().any() and not data_quality['data_quality'].eq(0).all():\n",
    "    col = 'data_quality'\n",
    "    calplot.calplot(data_quality[col], textfiller='-', dropzero=True)\n",
    "else:\n",
    "    print('No data available for plotting')\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f07b66af-2db2-47c6-a8d4-bec2796e74d4",
   "metadata": {},
   "source": [
    "### Screen Duration"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 24,
=======
   "execution_count": 23,
>>>>>>> refs/remotes/origin/main
   "id": "3903500a-7d7a-4d1f-86a2-5031e61c336e",
   "metadata": {},
   "outputs": [
    {
     "data": {
<<<<<<< HEAD
      "image/png": "",
=======
      "image/png": "",
>>>>>>> refs/remotes/origin/main
      "text/plain": [
       "<Figure size 1250x170 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "screen_duration = final_df[['date', 'screen_duration']]\n",
    "    \n",
    "screen_duration['date'] = pd.to_datetime(screen_duration['date'], yearfirst=True)\n",
    "screen_duration.set_index('date', inplace=True)\n",
    "        \n",
    "# Check if there is any valid data (non-NaN values)\n",
    "if screen_duration['screen_duration'].notna().any():\n",
    "    # plot\n",
    "    col = 'screen_duration'\n",
    "    calplot.calplot(screen_duration[col], textfiller='-', dropzero=True);\n",
    "else:\n",
    "    print('No data available for plotting')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3a157387-9b98-4d72-9a43-c923cbb04192",
   "metadata": {},
   "source": [
    "### Steps"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 25,
=======
   "execution_count": 24,
>>>>>>> refs/remotes/origin/main
   "id": "5a2c3e72-ee96-42b8-b2b2-e58f70254cc3",
   "metadata": {},
   "outputs": [
    {
     "data": {
<<<<<<< HEAD
      "image/png": "",
=======
      "image/png": "",
>>>>>>> refs/remotes/origin/main
      "text/plain": [
       "<Figure size 1000x170 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "try:\n",
    "    steps = final_df[['date', 'steps']]\n",
    "\n",
    "    steps['date'] = pd.to_datetime(steps['date'], yearfirst=True)\n",
    "    steps.set_index('date', inplace=True)\n",
    "    # plot\n",
    "    col = 'steps'\n",
    "    calplot.calplot(steps[col], textfiller='-', dropzero=True);\n",
    "except:\n",
    "    print('No data available for plotting')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "364fce18-0851-494e-a065-14f1b6cc2238",
   "metadata": {},
   "source": [
    "### Anxiety"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 26,
=======
   "execution_count": 25,
>>>>>>> refs/remotes/origin/main
   "id": "e51b92ae-c42f-435b-b40c-f85bb577442c",
   "metadata": {},
   "outputs": [
    {
     "data": {
<<<<<<< HEAD
      "image/png": "",
=======
      "image/png": "",
>>>>>>> refs/remotes/origin/main
      "text/plain": [
       "<Figure size 1250x170 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Check if data is available before proceeding\n",
    "if 'date' not in final_df.columns or 'anxiety' not in final_df.columns:\n",
    "    anxiety = pd.DataFrame(columns=['date', 'anxiety'])\n",
    "else:\n",
    "    # Extract relevant columns\n",
    "    anxiety = final_df[['date', 'anxiety']]\n",
    "\n",
    "    # Convert 'date' column to datetime format\n",
    "    anxiety['date'] = pd.to_datetime(anxiety['date'], yearfirst=True)\n",
    "\n",
    "    # Set 'date' as the index\n",
    "    anxiety.set_index('date', inplace=True)\n",
    "\n",
    "    # Replace 0s with a very small number (e.g., 1e-10)\n",
    "    anxiety['anxiety'] = anxiety['anxiety'].replace(0, 1e-10)\n",
    "\n",
    "# If DataFrame is empty, provide feedback\n",
    "if anxiety.empty:\n",
    "    print(\"No data available for plotting\")\n",
    "else:\n",
    "    # Plotting with fixed color scale\n",
    "    col = 'anxiety'\n",
    "    calplot.calplot(anxiety[col], textfiller='-', dropzero=True, vmin=0, vmax=10)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "35d53beb-2e26-4b47-962b-1abe705e6cc4",
   "metadata": {},
   "source": [
    "### Depression"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 27,
=======
   "execution_count": 26,
>>>>>>> refs/remotes/origin/main
   "id": "2253aa6d-e135-4d66-9790-e8c322a5cdb2",
   "metadata": {},
   "outputs": [
    {
     "data": {
<<<<<<< HEAD
      "image/png": "",
=======
      "image/png": "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fDhOnjyJDRs24Pfff0dycjKio6ORn59v7NQapOYSFfUFAIqLizWWioqKesWrmeS1RYsW992vpKQE3t7e8PT0xJAhQ3D27Fn9GlILnQscP//8MzIyMgBAKmJYW1vD19cXXbp0Qbt27WBjYwNRFKVCR0VFBbZs2SL79TVEREREREREhlJYWIh9+/Zh8eLFiImJgbe3N5544gnMnDkTTz/9NADgn//8J7p06QIHBwd4enri1VdfRUlJCQAgNTUV48aNQ1FRkfT38bx584zYorpHcHh6esLZ2VlaFi1a9MBYKpUKb7zxBrp3747OnTvXuV9AQAASEhLw/fff48svv4RKpUJkZCSuX78uV7MA6DgHR2FhIY4fPy4VNiwsLBAdHY2IiAhYW1tL+1VVVWH//v345ZdfpG1FRUXYsWMHnnnmGfmyJyIiIiIiIjIQR0dHODo6IikpCd26dYOtra3WPhYWFli+fDl8fX1x5coVvPrqq3jnnXfw6aefIjIyEh9//DHmzJkjzT/h6OjY2M3QIFSLECxEjXXg7l3unJycpO21tfVekydPxpkzZ7B///777hcREYGIiAhpPTIyEp06dcKaNWvwwQcf6NqEOuk0guPs2bOorq6WRmcMHToUPXv21ChuAICVlRWio6Px7LPPalyucubMGVy8eFG25ImIiIiIiIgMxcrKComJidiwYQNcXFzQvXt3zJo1C7/++qu0zxtvvIGYmBj4+PigV69e+PDDD/H1118DAGxsbODs7Kwx/4RJFDjuWYC7k4CqLw8qcEyZMgXbt2/Hnj178Mgjj+iUg7W1Nbp27YpLly41uB210anAoX5pSrt27dClS5f77h8YGIioqCipICKKIlJSUlBdreM0rURERERERERGMHz4cNy4cQPJycno378/UlNTERoaisTERADArl270Lt3b7Rt2xbNmjXDSy+9hPz8fJO9M4wg3nOJio739xBFEVOmTMF3332H//73v/D19dU5h+rqapw+fRoeHh46H3s/OhU41CdRCQoKqtcxTz75JNq2bSutFxQU4PDhw7qcloiIiIiIiMhoFAoF+vbti9mzZ+PgwYOIi4vD3LlzkZGRgUGDBiEoKAhbt27F8ePHsXLlSgBAZWWlkbOuXV2TjNbX5MmT8eWXX2LTpk1o1qwZcnJykJOTgzt37kj7jBkzBjNnzpTWFyxYgJ9/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",
>>>>>>> refs/remotes/origin/main
      "text/plain": [
       "<Figure size 1250x170 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Check if data is available before proceeding\n",
    "if 'date' not in final_df.columns or 'depression' not in final_df.columns:\n",
    "    depression = pd.DataFrame(columns=['date', 'depression'])\n",
    "else:\n",
    "    # Extract relevant columns\n",
    "    depression = final_df[['date', 'depression']]\n",
    "\n",
    "    # Convert 'date' column to datetime format\n",
    "    depression['date'] = pd.to_datetime(depression['date'], yearfirst=True)\n",
    "\n",
    "    # Set 'date' as the index\n",
    "    depression.set_index('date', inplace=True)\n",
    "\n",
    "    # Replace 0s with a very small number (e.g., 1e-10)\n",
    "    depression['depression'] = depression['depression'].replace(0, 1e-10)\n",
    "\n",
    "# If DataFrame is empty, provide feedback\n",
    "if depression.empty:\n",
    "    print(\"No data available for plotting\")\n",
    "else:\n",
    "    # Plotting with fixed color scale\n",
    "    col = 'depression'\n",
    "    calplot.calplot(depression[col], textfiller='-', dropzero=True, vmin=0, vmax=10);"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f88b6a87-4107-4c9a-97ce-1c6ab9f76512",
   "metadata": {},
   "source": [
    "### Difficulty Functioning"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 28,
=======
   "execution_count": 27,
>>>>>>> refs/remotes/origin/main
   "id": "c1b994d9-a9c1-4748-8c5d-794facd2b232",
   "metadata": {},
   "outputs": [
    {
     "data": {
<<<<<<< HEAD
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x170 with 1 Axes>"
=======
      "image/png": "",
      "text/plain": [
       "<Figure size 1250x170 with 2 Axes>"
>>>>>>> refs/remotes/origin/main
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Check if data is available before proceeding\n",
    "if 'date' not in final_df.columns or 'dysfunction' not in final_df.columns:\n",
    "    dysfunction = pd.DataFrame(columns=['date', 'dysfunction'])\n",
    "else:\n",
    "    # Extract relevant columns\n",
    "    dysfunction = final_df[['date', 'dysfunction']]\n",
    "\n",
    "    # Convert 'date' column to datetime format\n",
    "    dysfunction['date'] = pd.to_datetime(dysfunction['date'], yearfirst=True)\n",
    "\n",
    "    # Set 'date' as the index\n",
    "    dysfunction.set_index('date', inplace=True)\n",
    "\n",
    "    # Replace 0s with a very small number (e.g., 1e-10)\n",
    "    dysfunction['dysfunction'] = dysfunction['dysfunction'].replace(0, 1e-10)\n",
    "\n",
    "# If DataFrame is empty, provide feedback\n",
    "if dysfunction.empty:\n",
    "    print(\"No data available for plotting\")\n",
    "else:\n",
    "    # Plotting with fixed color scale\n",
    "    col = 'dysfunction'\n",
    "    calplot.calplot(dysfunction[col], textfiller='-', dropzero=True, vmin=0, vmax=10);"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d5522cb8-47d3-40e2-a994-cf46a47caa50",
   "metadata": {},
   "source": [
    "### Sleep Duration"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 29,
=======
   "execution_count": 28,
>>>>>>> refs/remotes/origin/main
   "id": "bc8ec576-531a-426a-944c-445020f822f2",
   "metadata": {},
   "outputs": [
    {
     "data": {
<<<<<<< HEAD
      "image/png": "",
=======
      "image/png": "",
>>>>>>> refs/remotes/origin/main
      "text/plain": [
       "<Figure size 1250x170 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "if 'sleep_duration_hours' in final_df.columns:\n",
    "    sleeptime = final_df[['date', 'sleep_duration_hours']]\n",
    "    sleeptime['date'] = pd.to_datetime(sleeptime['date'], yearfirst=True)\n",
    "    sleeptime.set_index('date', inplace=True)\n",
    "    col = 'sleep_duration_hours'\n",
    "    calplot.calplot(sleeptime[col], textfiller='-', dropzero=True)\n",
    "else:\n",
    "    print(\"No data available for plotting\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f69af438-0f07-4d80-ad7f-ab2de3fc1b23",
   "metadata": {},
   "source": [
    "# Your Progress Over Time"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1fd57df5-539a-4c3f-8157-8302ddcc9145",
   "metadata": {},
   "source": [
    "Throughout your time in the study, you will complete three surveys: an Intake survey during your first session with your Digital Navigator, an Interim survey after your third meeting with your clinician, and a Completion survey at the end of your last appointment. \n",
    "\n",
    "The graph below displays your responses to survey questions measuring anxiety, depression, and dysfunction (dysfunction represents how difficult it is to manage your day-to-day life and responsibilities). You can toggle over the survey category on the right to view all your survey responses together, or to only view your results from one of the surveys (just the Intake, for example). Clicking on the points on the graph shows your numerical score and what it is out of. Higher scores indicate having more symptoms of depression, anxiety, and/or dysfunction.\n",
    "\n",
    "We hope this graph will help you see what areas you have made progress in during your time in the study. "
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 30,
=======
   "execution_count": 29,
>>>>>>> refs/remotes/origin/main
   "id": "39d13037",
   "metadata": {},
   "outputs": [],
   "source": [
    "# The functions below will grab REDCap data to be used in graphs focused on weekly surveys\n",
    "\n",
    "from datetime import datetime\n",
    "import requests\n",
    "import pandas as pd\n",
    "import numpy as np  # Import numpy for NaN\n",
    "\n",
    "# Function to fetch REDCap scores with events and fields\n",
    "def fetch_redcap_scores(record_id, events, fields):\n",
    "    payload = {\n",
    "        'token': api_token,\n",
    "        'content': 'record',\n",
    "        'format': 'json',\n",
    "        'records[0]': record_id,\n",
    "        'type': 'flat'\n",
    "    }\n",
    "    \n",
    "    # Add the events to the payload\n",
    "    for i, event in enumerate(events):\n",
    "        payload[f'events[{i}]'] = event\n",
    "    \n",
    "    # Add the fields to the payload\n",
    "    for i, field in enumerate(fields):\n",
    "        payload[f'fields[{i}]'] = field\n",
    "\n",
    "    response = requests.post(api_url, data=payload)\n",
    "    \n",
    "    if response.status_code == 200:\n",
    "        data = response.json()\n",
    "        return data\n",
    "    else:\n",
    "        print(f\"Error: {response.status_code} - {response.text}\")\n",
    "        return None\n",
    "\n",
    "# List of events\n",
    "events = [\n",
    "    \"pretx_arm_2\", \"visit_1_arm_2\", \"visit_2_arm_2\",\n",
    "    \"visit_3_arm_2\", \"visit_4_arm_2\", \"visit_5_arm_2\", \"visit_6_arm_2\"\n",
    "]\n",
    "\n",
    "# Helper function to process data\n",
    "def process_data(data, score_field, date_field, event_list, survey_name):\n",
    "    scores = []\n",
    "    event_counter = 0  # Initialize counter for events\n",
    "    for record in data:\n",
    "        if score_field in record and date_field in record:  # Ensure both fields exist\n",
    "            score = record[score_field]\n",
    "            event = event_list[event_counter] if event_counter < len(event_list) else \"Unknown Event\"\n",
    "            \n",
    "            # Handle the date parsing carefully\n",
    "            date_str = record.get(date_field, None)\n",
    "            date = np.nan  # Initialize with NaN\n",
    "            \n",
    "            if date_str:\n",
    "                try:\n",
    "                    date = datetime.strptime(date_str, '%Y-%m-%d')\n",
    "                except ValueError:\n",
    "                    date = np.nan\n",
    "            \n",
    "            if score == '':\n",
    "                score = np.nan\n",
    "\n",
    "            scores.append({'Event': event, 'Score': score, 'Date': date, 'Survey': survey_name})\n",
    "            event_counter += 1\n",
    "\n",
    "    return scores\n",
    "\n",
    "record_id = subjectid\n",
    "\n",
    "# Fetch PHQ-9 data\n",
    "phq9_data = fetch_redcap_scores(record_id, events, [\"phq9_score\", \"phq9_date\"])\n",
    "phq9_scores = process_data(phq9_data, \"phq9_score\", \"phq9_date\", events, \"Weekly PHQ-9 Survey\")\n",
    "\n",
    "# Handle intake_arm_2 for PHQ-9 separately\n",
    "intake_phq9_data = fetch_redcap_scores(record_id, [\"intake_arm_2\"], [\"eligibility_phq_score\", \"eligibility_date\"])\n",
    "if intake_phq9_data:\n",
    "    for record in intake_phq9_data:\n",
    "        eligibility_date_str = record.get(\"eligibility_date\", None)\n",
    "        eligibility_date = np.nan\n",
    "\n",
    "        if eligibility_date_str:\n",
    "            try:\n",
    "                eligibility_date = datetime.strptime(eligibility_date_str, '%Y-%m-%d')\n",
    "            except ValueError:\n",
    "                eligibility_date = np.nan\n",
    "\n",
    "        phq_score = record.get(\"eligibility_phq_score\", np.nan)\n",
    "        if phq_score == '':\n",
    "            phq_score = np.nan\n",
    "\n",
    "        phq9_scores.append({'Event': 'intake_arm_2', 'Score': phq_score, 'Date': eligibility_date, 'Survey': 'Weekly PHQ-9 Survey'})\n",
    "\n",
    "# Fetch and process GAD-7 data\n",
    "gad7_data = fetch_redcap_scores(record_id, events, [\"gad7_score\", \"gad7_date\"])\n",
    "gad7_scores = process_data(gad7_data, \"gad7_score\", \"gad7_date\", events, \"Weekly GAD-7 Survey\")\n",
    "\n",
    "# Handle intake_arm_2 for GAD-7 separately\n",
    "intake_gad7_data = fetch_redcap_scores(record_id, [\"intake_arm_2\"], [\"eligibility_gad_score\", \"eligibility_date\"])\n",
    "if intake_gad7_data:\n",
    "    for record in intake_gad7_data:\n",
    "        eligibility_date_str = record.get(\"eligibility_date\", None)\n",
    "        eligibility_date = np.nan\n",
    "\n",
    "        if eligibility_date_str:\n",
    "            try:\n",
    "                eligibility_date = datetime.strptime(eligibility_date_str, '%Y-%m-%d')\n",
    "            except ValueError:\n",
    "                eligibility_date = np.nan\n",
    "\n",
    "        gad_score = record.get(\"eligibility_gad_score\", np.nan)\n",
    "        if gad_score == '':\n",
    "            gad_score = np.nan\n",
    "\n",
    "        gad7_scores.append({'Event': 'intake_arm_2', 'Score': gad_score, 'Date': eligibility_date, 'Survey': 'Weekly GAD-7 Survey'})\n",
    "\n",
    "\n",
    "# Fetch Sleep Survey data\n",
    "sleep_data = fetch_redcap_scores(record_id, events, [\"sleep_score\", \"sleep_date\"])\n",
    "sleep_scores = process_data(sleep_data, \"sleep_score\", \"sleep_date\", events, \"Weekly Sleep Survey\")\n",
    "\n",
    "# Handle intake_arm_2 for Sleep Survey separately\n",
    "intake_sleep_data = fetch_redcap_scores(record_id, [\"intake_arm_2\"], [\"sleep_score\", \"sleep_date\"])\n",
    "if intake_sleep_data:\n",
    "    for record in intake_sleep_data:\n",
    "        eligibility_date_str = record.get(\"sleep_date\", None)\n",
    "        eligibility_date = np.nan\n",
    "\n",
    "        if eligibility_date_str:\n",
    "            try:\n",
    "                eligibility_date = datetime.strptime(eligibility_date_str, '%Y-%m-%d')\n",
    "            except ValueError:\n",
    "                eligibility_date = np.nan\n",
    "\n",
    "        sleep_score = record.get(\"sleep_score\", np.nan)\n",
    "        if sleep_score == '':\n",
    "            sleep_score = np.nan\n",
    "\n",
    "        sleep_scores.append({'Event': 'intake_arm_2', 'Score': sleep_score, 'Date': eligibility_date, 'Survey': 'Weekly Sleep Survey'})\n",
    "\n",
    "\n",
    "\n",
    "# Fetch and process SDS data\n",
    "sds_data = fetch_redcap_scores(record_id, events, [\"sds_score\", \"sds_date\"])\n",
    "sds_scores = process_data(sds_data, \"sds_score\", \"sds_date\", events, \"Weekly SDS Survey\")\n",
    "\n",
    "# Handle intake_arm_2 for SDS separately\n",
    "intake_sds_data = fetch_redcap_scores(record_id, [\"intake_arm_2\"], [\"sds_score\", \"sds_date\"])\n",
    "if intake_sds_data:\n",
    "    for record in intake_sds_data:\n",
    "        eligibility_date_str = record.get(\"sds_date\", None)\n",
    "        eligibility_date = np.nan\n",
    "\n",
    "        if eligibility_date_str:\n",
    "            try:\n",
    "                eligibility_date = datetime.strptime(eligibility_date_str, '%Y-%m-%d')\n",
    "            except ValueError:\n",
    "                eligibility_date = np.nan\n",
    "\n",
    "        sds_score = record.get(\"sds_score\", np.nan)\n",
    "        if sds_score == '':\n",
    "            sds_score = np.nan\n",
    "\n",
    "        sds_scores.append({'Event': 'intake_arm_2', 'Score': sds_score, 'Date': eligibility_date, 'Survey': 'Weekly SDS Survey'})\n",
    "\n",
    "\n",
    "\n",
    "# Fetch and process ESA data\n",
    "esa_data = fetch_redcap_scores(record_id, events, [\"esa_score\", \"esa_date\"])\n",
    "esa_scores = process_data(esa_data, \"esa_score\", \"esa_date\", events, \"Weekly ESA Survey\")\n",
    "\n",
    "# Handle intake_arm_2 for ESA separately\n",
    "intake_esa_data = fetch_redcap_scores(record_id, [\"intake_arm_2\"], [\"esa_score\", \"esa_date\"])\n",
    "if intake_esa_data:\n",
    "    for record in intake_esa_data:\n",
    "        eligibility_date_str = record.get(\"esa_date\", None)\n",
    "        eligibility_date = np.nan\n",
    "\n",
    "        if eligibility_date_str:\n",
    "            try:\n",
    "                eligibility_date = datetime.strptime(eligibility_date_str, '%Y-%m-%d')\n",
    "            except ValueError:\n",
    "                eligibility_date = np.nan\n",
    "\n",
    "        esa_score = record.get(\"esa_score\", np.nan)\n",
    "        if esa_score == '':\n",
    "            esa_score = np.nan\n",
    "\n",
    "        esa_scores.append({'Event': 'intake_arm_2', 'Score': esa_score, 'Date': eligibility_date, 'Survey': 'Weekly ESA Survey'})\n",
    "\n",
    "\n",
    "# Fetch and process MSPSS data\n",
    "mspss_data = fetch_redcap_scores(record_id, events, [\"mspss_score\", \"mspss_date\"])\n",
    "mspss_scores = process_data(mspss_data, \"mspss_score\", \"mspss_date\", events, \"Weekly MSPSS Survey\")\n",
    "\n",
    "# Handle intake_arm_2 for MSPSS separately\n",
    "intake_mspss_data = fetch_redcap_scores(record_id, [\"intake_arm_2\"], [\"mspss_score\", \"mspss_date\"])\n",
    "if intake_mspss_data:\n",
    "    for record in intake_mspss_data:\n",
    "        eligibility_date_str = record.get(\"mspss_date\", None)\n",
    "        eligibility_date = np.nan\n",
    "\n",
    "        if eligibility_date_str:\n",
    "            try:\n",
    "                eligibility_date = datetime.strptime(eligibility_date_str, '%Y-%m-%d')\n",
    "            except ValueError:\n",
    "                eligibility_date = np.nan\n",
    "\n",
    "        mspss_score = record.get(\"mspss_score\", np.nan)\n",
    "        if mspss_score == '':\n",
    "            mspss_score = np.nan\n",
    "\n",
    "        mspss_scores.append({'Event': 'intake_arm_2', 'Score': mspss_score, 'Date': eligibility_date, 'Survey': 'Weekly MSPSS Survey'})\n",
    "\n",
    "\n",
    "# Fetch and process Flourishing scale data\n",
    "fs_data = fetch_redcap_scores(record_id, events, [\"fs_score\", \"fs_date\"])\n",
    "fs_scores = process_data(fs_data, \"fs_score\", \"fs_date\", events, \"Weekly Flourishing Survey\")\n",
    "\n",
    "# Handle intake_arm_2 for Flourishing scale separately\n",
    "intake_fs_data = fetch_redcap_scores(record_id, [\"intake_arm_2\"], [\"fs_score\", \"fs_date\"])\n",
    "if intake_fs_data:\n",
    "    for record in intake_fs_data:\n",
    "        eligibility_date_str = record.get(\"fs_date\", None)\n",
    "        eligibility_date = np.nan\n",
    "\n",
    "        if eligibility_date_str:\n",
    "            try:\n",
    "                eligibility_date = datetime.strptime(eligibility_date_str, '%Y-%m-%d')\n",
    "            except ValueError:\n",
    "                eligibility_date = np.nan\n",
    "\n",
    "        fs_score = record.get(\"fs_score\", np.nan)\n",
    "        if fs_score == '':\n",
    "            fs_score = np.nan\n",
    "\n",
    "        fs_scores.append({'Event': 'intake_arm_2', 'Score': fs_score, 'Date': eligibility_date, 'Survey': 'Weekly Flourishing Survey'})\n",
    "\n",
    "\n",
    "\n",
    "# Fetch and process PSE data\n",
    "pse_data = fetch_redcap_scores(record_id, events, [\"pse_score\", \"pse_date\"])\n",
    "pse_scores = process_data(pse_data, \"pse_score\", \"pse_date\", events, \"Weekly PSE Survey\")\n",
    "\n",
    "# Handle intake_arm_2 for PSE separately\n",
    "intake_pse_data = fetch_redcap_scores(record_id, [\"intake_arm_2\"], [\"pse_score\", \"pse_date\"])\n",
    "if intake_pse_data:\n",
    "    for record in intake_pse_data:\n",
    "        eligibility_date_str = record.get(\"pse_date\", None)\n",
    "        eligibility_date = np.nan\n",
    "\n",
    "        if eligibility_date_str:\n",
    "            try:\n",
    "                eligibility_date = datetime.strptime(eligibility_date_str, '%Y-%m-%d')\n",
    "            except ValueError:\n",
    "                eligibility_date = np.nan\n",
    "\n",
    "        pse_score = record.get(\"pse_score\", np.nan)\n",
    "        if pse_score == '':\n",
    "            pse_score = np.nan\n",
    "\n",
    "        pse_scores.append({'Event': 'intake_arm_2', 'Score': pse_score, 'Date': eligibility_date, 'Survey': 'Weekly PSE Survey'})\n",
    "\n",
    "\n",
    "# Fetch and process DHLS data\n",
    "dhls_data = fetch_redcap_scores(record_id, events, [\"dhls_score\", \"dhls_date\"])\n",
    "dhls_scores = process_data(dhls_data, \"dhls_score\", \"dhls_date\", events, \"Weekly DHLS Survey\")\n",
    "\n",
    "# Handle intake_arm_2 for DHLS separately\n",
    "intake_dhls_data = fetch_redcap_scores(record_id, [\"intake_arm_2\"], [\"dhls_score\", \"dhls_date\"])\n",
    "if intake_dhls_data:\n",
    "    for record in intake_dhls_data:\n",
    "        eligibility_date_str = record.get(\"dhls_date\", None)\n",
    "        eligibility_date = np.nan\n",
    "\n",
    "        if eligibility_date_str:\n",
    "            try:\n",
    "                eligibility_date = datetime.strptime(eligibility_date_str, '%Y-%m-%d')\n",
    "            except ValueError:\n",
    "                eligibility_date = np.nan\n",
    "\n",
    "        dhls_score = record.get(\"dhls_score\", np.nan)\n",
    "        if dhls_score == '':\n",
    "            dhls_score = np.nan\n",
    "\n",
    "        dhls_scores.append({'Event': 'intake_arm_2', 'Score': dhls_score, 'Date': eligibility_date, 'Survey': 'Weekly DHLS Survey'})\n",
    "\n",
    "\n",
    "# Combine all scores\n",
    "all_scores = phq9_scores + gad7_scores + sleep_scores + sds_scores + esa_scores + mspss_scores + fs_scores + pse_scores + dhls_scores\n",
    "\n",
    "# Convert to DataFrame\n",
    "weekly_df = pd.DataFrame(all_scores)\n",
    "\n",
    "# Format 'Date' column to match 'YYYY-MM-DD' format, handle NaT separately\n",
    "def format_date(x):\n",
    "    if pd.isna(x):  # Check for NaT\n",
    "        return np.nan  # Return NaN for NaT values\n",
    "    elif isinstance(x, datetime):  # Check if it's a valid datetime object\n",
    "        return x.strftime('%Y-%m-%d')\n",
    "    return np.nan  # For any other case, return NaN\n",
    "\n",
    "# Apply the formatting to the 'Date' column\n",
    "weekly_df['Date'] = weekly_df['Date'].apply(format_date)\n",
    "\n",
    "# Filter out rows where the 'Score' is NaN\n",
    "filtered_df = weekly_df[~weekly_df['Score'].isna()]\n"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 31,
=======
   "execution_count": 30,
>>>>>>> refs/remotes/origin/main
   "id": "1491baf0",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Function to safely extract a score for a given event and survey\n",
    "def get_score_for_event(df, event, survey_name):\n",
    "    # Filter the DataFrame for the given event and survey\n",
    "    filtered = df[(df['Event'] == event) & (df['Survey'] == survey_name)]\n",
    "    \n",
    "    # Check if the filtered DataFrame is empty and return NaN if no data exists\n",
    "    if filtered.empty or pd.isna(filtered['Score'].iloc[0]):\n",
    "        return np.nan\n",
    "    else:\n",
    "        return filtered['Score'].iloc[0]\n",
    "\n",
    "# Extract the scores for each event\n",
    "intake_phq = get_score_for_event(filtered_df, 'intake_arm_2', 'Weekly PHQ-9 Survey')\n",
    "interim_phq = get_score_for_event(filtered_df, 'visit_3_arm_2', 'Weekly PHQ-9 Survey')\n",
    "final_phq = get_score_for_event(filtered_df, 'visit_6_arm_2', 'Weekly PHQ-9 Survey')\n",
    "\n",
    "intake_gad = get_score_for_event(filtered_df, 'intake_arm_2', 'Weekly GAD-7 Survey')\n",
    "interim_gad = get_score_for_event(filtered_df, 'visit_3_arm_2', 'Weekly GAD-7 Survey')\n",
    "final_gad = get_score_for_event(filtered_df, 'visit_6_arm_2', 'Weekly GAD-7 Survey')\n",
    "\n",
    "intake_sds = get_score_for_event(filtered_df, 'intake_arm_2', 'Weekly SDS Survey')\n",
    "interim_sds = get_score_for_event(filtered_df, 'visit_3_arm_2', 'Weekly SDS Survey')\n",
    "final_sds = get_score_for_event(filtered_df, 'visit_6_arm_2', 'Weekly SDS Survey')\n",
    "\n",
    "intake_esa = get_score_for_event(filtered_df, 'intake_arm_2', 'Weekly ESA Survey')\n",
    "interim_esa = get_score_for_event(filtered_df, 'visit_3_arm_2', 'Weekly ESA Survey')\n",
    "final_esa = get_score_for_event(filtered_df, 'visit_6_arm_2', 'Weekly ESA Survey')\n",
    "\n",
    "intake_mspss = get_score_for_event(filtered_df, 'intake_arm_2', 'Weekly MSPSS Survey')\n",
    "interim_mspss = get_score_for_event(filtered_df, 'visit_3_arm_2', 'Weekly MSPSS Survey')\n",
    "final_mspss = get_score_for_event(filtered_df, 'visit_6_arm_2', 'Weekly MSPSS Survey')\n",
    "\n",
    "intake_fs = get_score_for_event(filtered_df, 'intake_arm_2', 'Weekly Flourishing Survey')\n",
    "interim_fs = get_score_for_event(filtered_df, 'visit_3_arm_2', 'Weekly Flourishing Survey')\n",
    "final_fs = get_score_for_event(filtered_df, 'visit_6_arm_2', 'Weekly Flourishing Survey')\n",
    "\n",
    "intake_pse = get_score_for_event(filtered_df, 'intake_arm_2', 'Weekly PSE Survey')\n",
    "interim_pse = get_score_for_event(filtered_df, 'visit_3_arm_2', 'Weekly PSE Survey')\n",
    "final_pse = get_score_for_event(filtered_df, 'visit_6_arm_2', 'Weekly PSE Survey')\n",
    "\n",
    "intake_dhls = get_score_for_event(filtered_df, 'intake_arm_2', 'Weekly DHLS Survey')\n",
    "interim_dhls = get_score_for_event(filtered_df, 'visit_3_arm_2', 'Weekly DHLS Survey')\n",
    "final_dhls = get_score_for_event(filtered_df, 'visit_6_arm_2', 'Weekly DHLS Survey')\n"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 32,
=======
   "execution_count": 31,
>>>>>>> refs/remotes/origin/main
   "id": "b3f6249e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
<<<<<<< HEAD
       "<div>                            <div id=\"b2af9e16-d9d4-4927-8e55-47156610c146\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                require([\"plotly\"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"b2af9e16-d9d4-4927-8e55-47156610c146\")) {                    Plotly.newPlot(                        \"b2af9e16-d9d4-4927-8e55-47156610c146\",                        [{\"fill\":\"toself\",\"hovertemplate\":\"Score: %{text}\",\"line\":{\"color\":\"#F6222E\"},\"name\":\"Intake\",\"r\":[0.3333333333333333,0.3333333333333333,0.26666666666666666],\"text\":[\"9 out of 27\",\"7 out of 21\",\"8 out of 30\"],\"theta\":[\"Depression\",\"Anxiety\",\"Difficulty Functioning\"],\"type\":\"scatterpolar\"},{\"fill\":\"toself\",\"hovertemplate\":\"Score: %{text}\",\"line\":{\"color\":\"#3366CC\"},\"name\":\"Interim\",\"r\":[0.18518518518518517,0.2857142857142857,0.8333333333333334],\"text\":[\"5 out of 27\",\"6 out of 21\",\"25 out of 30\"],\"theta\":[\"Depression\",\"Anxiety\",\"Difficulty Functioning\"],\"type\":\"scatterpolar\"},{\"fill\":\"toself\",\"hovertemplate\":\"Score: %{text}\",\"line\":{\"color\":\"#2E8B57\"},\"name\":\"Final\",\"r\":[0.1111111111111111,0.047619047619047616,0.23333333333333334],\"text\":[\"3 out of 27\",\"1 out of 21\",\"7 out of 30\"],\"theta\":[\"Depression\",\"Anxiety\",\"Difficulty Functioning\"],\"type\":\"scatterpolar\"}],                        {\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"type\":\"scattergl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"bgcolor\":\"#E5ECF6\",\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"#E5ECF6\",\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"subunitcolor\":\"white\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"white\"},\"title\":{\"x\":0.05},\"mapbox\":{\"style\":\"light\"}}},\"polar\":{\"radialaxis\":{\"visible\":false,\"range\":[0,1]}},\"showlegend\":true},                        {\"responsive\": true}                    ).then(function(){\n",
       "                            \n",
       "var gd = document.getElementById('b2af9e16-d9d4-4927-8e55-47156610c146');\n",
=======
       "<div>                            <div id=\"d5b8f08a-b726-4562-86b2-2ee1122aa44d\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                require([\"plotly\"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"d5b8f08a-b726-4562-86b2-2ee1122aa44d\")) {                    Plotly.newPlot(                        \"d5b8f08a-b726-4562-86b2-2ee1122aa44d\",                        [{\"fill\":\"toself\",\"hovertemplate\":\"Score: %{text}\",\"line\":{\"color\":\"#F6222E\"},\"name\":\"Intake\",\"r\":[0.3333333333333333,0.3333333333333333,0.26666666666666666],\"text\":[\"9 out of 27\",\"7 out of 21\",\"8 out of 30\"],\"theta\":[\"Depression\",\"Anxiety\",\"Difficulty Functioning\"],\"type\":\"scatterpolar\"},{\"fill\":\"toself\",\"hovertemplate\":\"Score: %{text}\",\"line\":{\"color\":\"#3366CC\"},\"name\":\"Interim\",\"r\":[0.18518518518518517,0.2857142857142857,0.8333333333333334],\"text\":[\"5 out of 27\",\"6 out of 21\",\"25 out of 30\"],\"theta\":[\"Depression\",\"Anxiety\",\"Difficulty Functioning\"],\"type\":\"scatterpolar\"},{\"fill\":\"toself\",\"hovertemplate\":\"Score: %{text}\",\"line\":{\"color\":\"#2E8B57\"},\"name\":\"Final\",\"r\":[0.1111111111111111,0.047619047619047616,0.23333333333333334],\"text\":[\"3 out of 27\",\"1 out of 21\",\"7 out of 30\"],\"theta\":[\"Depression\",\"Anxiety\",\"Difficulty Functioning\"],\"type\":\"scatterpolar\"}],                        {\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"type\":\"scattergl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"bgcolor\":\"#E5ECF6\",\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"#E5ECF6\",\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"subunitcolor\":\"white\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"white\"},\"title\":{\"x\":0.05},\"mapbox\":{\"style\":\"light\"}}},\"polar\":{\"radialaxis\":{\"visible\":false,\"range\":[0,1]}},\"showlegend\":true},                        {\"responsive\": true}                    ).then(function(){\n",
       "                            \n",
       "var gd = document.getElementById('d5b8f08a-b726-4562-86b2-2ee1122aa44d');\n",
>>>>>>> refs/remotes/origin/main
       "var x = new MutationObserver(function (mutations, observer) {{\n",
       "        var display = window.getComputedStyle(gd).display;\n",
       "        if (!display || display === 'none') {{\n",
       "            console.log([gd, 'removed!']);\n",
       "            Plotly.purge(gd);\n",
       "            observer.disconnect();\n",
       "        }}\n",
       "}});\n",
       "\n",
       "// Listen for the removal of the full notebook cells\n",
       "var notebookContainer = gd.closest('#notebook-container');\n",
       "if (notebookContainer) {{\n",
       "    x.observe(notebookContainer, {childList: true});\n",
       "}}\n",
       "\n",
       "// Listen for the clearing of the current output cell\n",
       "var outputEl = gd.closest('.output');\n",
       "if (outputEl) {{\n",
       "    x.observe(outputEl, {childList: true});\n",
       "}}\n",
       "\n",
       "                        })                };                });            </script>        </div>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import plotly.graph_objects as go\n",
    "import pandas as pd\n",
    "\n",
    "# Define the categories for the radar chart\n",
    "categories = ['Depression', 'Anxiety', 'Difficulty Functioning']\n",
    "\n",
    "# Convert inputs to numeric, treating invalid inputs as NaN\n",
    "intake_phq = pd.to_numeric(intake_phq, errors='coerce')\n",
    "intake_gad = pd.to_numeric(intake_gad, errors='coerce')\n",
    "intake_sds = pd.to_numeric(intake_sds, errors='coerce')\n",
    "\n",
    "interim_phq = pd.to_numeric(interim_phq, errors='coerce')\n",
    "interim_gad = pd.to_numeric(interim_gad, errors='coerce')\n",
    "interim_sds = pd.to_numeric(interim_sds, errors='coerce')\n",
    "\n",
    "final_phq = pd.to_numeric(final_phq, errors='coerce')\n",
    "final_gad = pd.to_numeric(final_gad, errors='coerce')\n",
    "final_sds = pd.to_numeric(final_sds, errors='coerce')\n",
    "\n",
    "# Initialize the figure\n",
    "fig = go.Figure()\n",
    "\n",
    "# Check and add intake data if all intake values are available\n",
    "if pd.notna(intake_phq) and pd.notna(intake_gad) and pd.notna(intake_sds):\n",
    "    phq_scaled = intake_phq / 27\n",
    "    gad_scaled = intake_gad / 21\n",
    "    sds_scaled = intake_sds / 30\n",
    "\n",
    "    fig.add_trace(go.Scatterpolar(\n",
    "        r=[phq_scaled, gad_scaled, sds_scaled],\n",
    "        theta=categories,\n",
    "        line_color='#F6222E',\n",
    "        fill='toself',\n",
    "        name='Intake',\n",
    "        text=[f'{intake_phq} out of 27', f'{intake_gad} out of 21', f'{intake_sds} out of 30'],\n",
    "        hovertemplate='Score: %{text}'\n",
    "    ))\n",
    "\n",
    "# Check and add interim data if all interim values are available\n",
    "if pd.notna(interim_phq) and pd.notna(interim_gad) and pd.notna(interim_sds):\n",
    "    phq_interim_scaled = interim_phq / 27\n",
    "    gad_interim_scaled = interim_gad / 21\n",
    "    sds_interim_scaled = interim_sds / 30\n",
    "\n",
    "    fig.add_trace(go.Scatterpolar(\n",
    "        r=[phq_interim_scaled, gad_interim_scaled, sds_interim_scaled],\n",
    "        theta=categories,\n",
    "        line_color='#3366CC',\n",
    "        fill='toself',\n",
    "        name='Interim',\n",
    "        text=[f'{interim_phq} out of 27', f'{interim_gad} out of 21', f'{interim_sds} out of 30'],\n",
    "        hovertemplate='Score: %{text}'\n",
    "    ))\n",
    "\n",
    "# Check and add final data if all final values are available\n",
    "if pd.notna(final_phq) and pd.notna(final_gad) and pd.notna(final_sds):\n",
    "    phq_final_scaled = final_phq / 27\n",
    "    gad_final_scaled = final_gad / 21\n",
    "    sds_final_scaled = final_sds / 30\n",
    "\n",
    "    fig.add_trace(go.Scatterpolar(\n",
    "        r=[phq_final_scaled, gad_final_scaled, sds_final_scaled],\n",
    "        theta=categories,\n",
    "        line_color='#2E8B57',\n",
    "        fill='toself',\n",
    "        name='Final',\n",
    "        text=[f'{final_phq} out of 27', f'{final_gad} out of 21', f'{final_sds} out of 30'],\n",
    "        hovertemplate='Score: %{text}'\n",
    "    ))\n",
    "\n",
    "# Update layout\n",
    "fig.update_layout(\n",
    "    polar=dict(radialaxis=dict(visible=False, range=[0, 1])),\n",
    "    showlegend=True\n",
    ")\n",
    "\n",
    "# Display the radar chart if any data is available\n",
    "if fig.data:\n",
    "    fig.show()\n",
    "else:\n",
    "    print(\"No valid data to display.\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1d133f3b-1244-4de0-9179-80752eed596e",
   "metadata": {},
   "source": [
    "The graph below displays your responses to survey questions measuring your self efficacy, motivation, digital literacy, emotional self awareness, and perceived social support. Like in the first graph, you can toggle over which survey you are seeing on the right, or you can click on the graph points to look at your numerical scores. Higher scores indicate greater feelings of motivation, self efficacy, self awareness, and social support, or a greater amount of digital literacy. \n",
    "\n",
    "The goal of this graph it so show what areas you have grown in during your time in the Digital Clinic. "
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 33,
=======
   "execution_count": 32,
>>>>>>> refs/remotes/origin/main
   "id": "7c5ad439",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
<<<<<<< HEAD
       "<div>                            <div id=\"1fd2ac1b-4ca7-4eae-8c4c-4e2b1b76af35\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                require([\"plotly\"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"1fd2ac1b-4ca7-4eae-8c4c-4e2b1b76af35\")) {                    Plotly.newPlot(                        \"1fd2ac1b-4ca7-4eae-8c4c-4e2b1b76af35\",                        [{\"fill\":\"toself\",\"hovertemplate\":\"Score: %{text}\",\"line\":{\"color\":\"#F6222E\"},\"name\":\"Intake\",\"r\":[1.0,0.5,1.0,1.0,1.0],\"text\":[\"40 out of 40\",\"6 out of 12\",\"5 out of 5\",\"84 out of 84\",\"56 out of 56\"],\"theta\":[\"Self Efficacy\",\"Digital Literacy\",\"Emotional Self Awareness\",\"Perceived Social Support\",\"Flourishing Scale\"],\"type\":\"scatterpolar\"},{\"fill\":\"toself\",\"hovertemplate\":\"Score: %{text}\",\"line\":{\"color\":\"#3366CC\"},\"name\":\"Interim\",\"r\":[0.7,0.5833333333333334,0.6,0.7142857142857143,0.6964285714285714],\"text\":[\"28 out of 40\",\"7 out of 12\",\"3 out of 5\",\"60 out of 84\",\"39 out of 56\"],\"theta\":[\"Self Efficacy\",\"Digital Literacy\",\"Emotional Self Awareness\",\"Perceived Social Support\",\"Flourishing Scale\"],\"type\":\"scatterpolar\"},{\"fill\":\"toself\",\"hovertemplate\":\"Score: %{text}\",\"line\":{\"color\":\"#2E8B57\"},\"name\":\"Final\",\"r\":[0.775,0.9166666666666666,1.0,0.8452380952380952,0.8392857142857143],\"text\":[\"31 out of 40\",\"11 out of 12\",\"5 out of 5\",\"71 out of 84\",\"47 out of 56\"],\"theta\":[\"Self Efficacy\",\"Digital Literacy\",\"Emotional Self Awareness\",\"Perceived Social Support\",\"Flourishing Scale\"],\"type\":\"scatterpolar\"}],                        {\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"type\":\"scattergl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"bgcolor\":\"#E5ECF6\",\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"#E5ECF6\",\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"subunitcolor\":\"white\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"white\"},\"title\":{\"x\":0.05},\"mapbox\":{\"style\":\"light\"}}},\"polar\":{\"radialaxis\":{\"visible\":false,\"range\":[0,1]}},\"showlegend\":true},                        {\"responsive\": true}                    ).then(function(){\n",
       "                            \n",
       "var gd = document.getElementById('1fd2ac1b-4ca7-4eae-8c4c-4e2b1b76af35');\n",
=======
       "<div>                            <div id=\"96a84a89-be12-43d3-8ef4-ee1eede48cc7\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                require([\"plotly\"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"96a84a89-be12-43d3-8ef4-ee1eede48cc7\")) {                    Plotly.newPlot(                        \"96a84a89-be12-43d3-8ef4-ee1eede48cc7\",                        [{\"fill\":\"toself\",\"hovertemplate\":\"Score: %{text}\",\"line\":{\"color\":\"#F6222E\"},\"name\":\"Intake\",\"r\":[1.0,0.5,1.0,1.0,1.0],\"text\":[\"40 out of 40\",\"6 out of 12\",\"5 out of 5\",\"84 out of 84\",\"56 out of 56\"],\"theta\":[\"Self Efficacy\",\"Digital Literacy\",\"Emotional Self Awareness\",\"Perceived Social Support\",\"Flourishing Scale\"],\"type\":\"scatterpolar\"},{\"fill\":\"toself\",\"hovertemplate\":\"Score: %{text}\",\"line\":{\"color\":\"#3366CC\"},\"name\":\"Interim\",\"r\":[0.7,0.5833333333333334,0.6,0.7142857142857143,0.6964285714285714],\"text\":[\"28 out of 40\",\"7 out of 12\",\"3 out of 5\",\"60 out of 84\",\"39 out of 56\"],\"theta\":[\"Self Efficacy\",\"Digital Literacy\",\"Emotional Self Awareness\",\"Perceived Social Support\",\"Flourishing Scale\"],\"type\":\"scatterpolar\"},{\"fill\":\"toself\",\"hovertemplate\":\"Score: %{text}\",\"line\":{\"color\":\"#2E8B57\"},\"name\":\"Final\",\"r\":[0.775,0.9166666666666666,1.0,0.8452380952380952,0.8392857142857143],\"text\":[\"31 out of 40\",\"11 out of 12\",\"5 out of 5\",\"71 out of 84\",\"47 out of 56\"],\"theta\":[\"Self Efficacy\",\"Digital Literacy\",\"Emotional Self Awareness\",\"Perceived Social Support\",\"Flourishing Scale\"],\"type\":\"scatterpolar\"}],                        {\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"type\":\"scattergl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"bgcolor\":\"#E5ECF6\",\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"#E5ECF6\",\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"subunitcolor\":\"white\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"white\"},\"title\":{\"x\":0.05},\"mapbox\":{\"style\":\"light\"}}},\"polar\":{\"radialaxis\":{\"visible\":false,\"range\":[0,1]}},\"showlegend\":true},                        {\"responsive\": true}                    ).then(function(){\n",
       "                            \n",
       "var gd = document.getElementById('96a84a89-be12-43d3-8ef4-ee1eede48cc7');\n",
>>>>>>> refs/remotes/origin/main
       "var x = new MutationObserver(function (mutations, observer) {{\n",
       "        var display = window.getComputedStyle(gd).display;\n",
       "        if (!display || display === 'none') {{\n",
       "            console.log([gd, 'removed!']);\n",
       "            Plotly.purge(gd);\n",
       "            observer.disconnect();\n",
       "        }}\n",
       "}});\n",
       "\n",
       "// Listen for the removal of the full notebook cells\n",
       "var notebookContainer = gd.closest('#notebook-container');\n",
       "if (notebookContainer) {{\n",
       "    x.observe(notebookContainer, {childList: true});\n",
       "}}\n",
       "\n",
       "// Listen for the clearing of the current output cell\n",
       "var outputEl = gd.closest('.output');\n",
       "if (outputEl) {{\n",
       "    x.observe(outputEl, {childList: true});\n",
       "}}\n",
       "\n",
       "                        })                };                });            </script>        </div>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import plotly.graph_objects as go\n",
    "import pandas as pd\n",
    "\n",
    "# Define the categories for the radar chart\n",
    "categories = ['Self Efficacy', 'Digital Literacy', 'Emotional Self Awareness', 'Perceived Social Support', 'Flourishing Scale']\n",
    "\n",
    "# Convert inputs to numeric, treating invalid inputs as NaN\n",
    "intake_pse = pd.to_numeric(intake_pse, errors='coerce')\n",
    "intake_dhls = pd.to_numeric(intake_dhls, errors='coerce')\n",
    "intake_esa = pd.to_numeric(intake_esa, errors='coerce')\n",
    "intake_mspss = pd.to_numeric(intake_mspss, errors='coerce')\n",
    "intake_fs = pd.to_numeric(intake_fs, errors='coerce')\n",
    "\n",
    "\n",
    "# Initialize the figure\n",
    "fig = go.Figure()\n",
    "\n",
    "# Check and add intake data if all intake values are available\n",
    "if pd.notna(intake_pse) and pd.notna(intake_dhls) and pd.notna(intake_esa) and pd.notna(intake_mspss) and pd.notna(intake_fs):\n",
    "    pse_scaled = intake_pse / 40\n",
    "    dhls_scaled = intake_dhls / 12\n",
    "    esa_scaled = intake_esa / 5\n",
    "    mspss_scaled = intake_mspss / 84\n",
    "    fs_scaled = intake_fs / 56\n",
    "\n",
    "    fig.add_trace(go.Scatterpolar(\n",
    "        r=[pse_scaled, dhls_scaled, esa_scaled, mspss_scaled, fs_scaled],\n",
    "        theta=categories,\n",
    "        line_color='#F6222E',\n",
    "        fill='toself',\n",
    "        name='Intake',\n",
    "        text=[f'{intake_pse} out of 40', f'{intake_dhls} out of 12', f'{intake_esa} out of 5', f'{intake_mspss} out of 84', f'{intake_fs} out of 56'],\n",
    "        hovertemplate='Score: %{text}'\n",
    "    ))\n",
    "\n",
    "\n",
    "interim_pse = pd.to_numeric(interim_pse, errors='coerce') \n",
    "interim_dhls = pd.to_numeric(interim_dhls, errors='coerce') \n",
    "interim_esa = pd.to_numeric(interim_esa, errors='coerce')  \n",
    "interim_mspss = pd.to_numeric(interim_mspss, errors='coerce')  \n",
    "interim_fs = pd.to_numeric(interim_fs, errors='coerce')  \n",
    "\n",
    "\n",
    "if pd.notna(interim_pse) and pd.notna(interim_dhls) and pd.notna(interim_esa) and pd.notna(interim_mspss) and pd.notna(interim_fs):\n",
    "    pse_interim_scaled = interim_pse / 40\n",
    "    dhls_interim_scaled = interim_dhls / 12\n",
    "    esa_interim_scaled = interim_esa / 5\n",
    "    mspss_interim_scaled = interim_mspss / 84\n",
    "    fs_interim_scaled = interim_fs / 56\n",
    "\n",
    "    fig.add_trace(go.Scatterpolar(\n",
    "        r=[pse_interim_scaled, dhls_interim_scaled, esa_interim_scaled, mspss_interim_scaled, fs_interim_scaled],\n",
    "        theta=categories,\n",
    "        line_color='#3366CC',\n",
    "        fill='toself',\n",
    "        name='Interim',\n",
    "        text=[f'{interim_pse} out of 40', f'{interim_dhls} out of 12', f'{interim_esa} out of 5', f'{interim_mspss} out of 84', f'{interim_fs} out of 56'],\n",
    "        hovertemplate='Score: %{text}'\n",
    "    ))\n",
    "\n",
    "\n",
    "\n",
    "final_pse = pd.to_numeric(final_pse, errors='coerce')  \n",
    "final_dhls = pd.to_numeric(final_dhls, errors='coerce')  \n",
    "final_esa = pd.to_numeric(final_esa, errors='coerce')  \n",
    "final_mspss = pd.to_numeric(final_mspss, errors='coerce')  \n",
    "final_fs = pd.to_numeric(final_fs, errors='coerce')  \n",
    "\n",
    "if pd.notna(final_pse) and pd.notna(final_dhls) and pd.notna(final_esa) and pd.notna(final_mspss) and pd.notna(final_fs):\n",
    "    pse_final_scaled = final_pse / 40\n",
    "    dhls_final_scaled = final_dhls / 12\n",
    "    esa_final_scaled = final_esa / 5\n",
    "    mspss_final_scaled = final_mspss / 84\n",
    "    fs_final_scaled = final_fs / 56\n",
    "\n",
    "    fig.add_trace(go.Scatterpolar(\n",
    "        r=[pse_final_scaled, dhls_final_scaled, esa_final_scaled, mspss_final_scaled, fs_final_scaled],\n",
    "        theta=categories,\n",
    "        line_color='#2E8B57',\n",
    "        fill='toself',\n",
    "        name='Final',\n",
    "        text=[f'{final_pse} out of 40', f'{final_dhls} out of 12', f'{final_esa} out of 5', f'{final_mspss} out of 84', f'{final_fs} out of 56'],\n",
    "        hovertemplate='Score: %{text}'\n",
    "    ))\n",
    "\n",
    "\n",
    "\n",
    "# Update layout\n",
    "fig.update_layout(\n",
    "    polar=dict(radialaxis=dict(visible=False, range=[0, 1])),\n",
    "    showlegend=True\n",
    ")\n",
    "\n",
    "# Display the radar chart if any data is available\n",
    "if fig.data:\n",
    "    fig.show()\n",
    "else:\n",
    "    print(\"No valid data to display.\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a18d57d0-9336-4674-8ce7-8804f344083f",
   "metadata": {},
   "source": [
    "# Weekly Surveys"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3d58ef30-f09c-4542-83ec-3581f04106cf",
   "metadata": {},
   "source": [
    "During your time in the clinic, you completed weekly surveys measuring anxiety (GAD-7), depression (PHQ-9) levels, and sleep quality. The line graph shows your scores over your time in the clinic, with blue measuring anxiety, red measuring depression levels, and green measuring sleep quality. The goal of this graph is to measure your progress with your depression and anxiety symptoms throughout your time in the clinic. \n",
    "\n",
    "Higher scores designate higher values of depression and anxiety. Anxiety values are measured from 0 to 21, and depression values are measured from 0 to 27. Your sleep score ranges from 8 to 40, with a 40 representing poor sleep and an 8 representing good sleep. The lower the score, the better your sleep quality."
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 34,
=======
   "execution_count": 33,
>>>>>>> refs/remotes/origin/main
   "id": "34769521",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
<<<<<<< HEAD
       "<div>                            <div id=\"012ab208-2433-4d4d-aa2f-936ec1742533\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                require([\"plotly\"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"012ab208-2433-4d4d-aa2f-936ec1742533\")) {                    Plotly.newPlot(                        \"012ab208-2433-4d4d-aa2f-936ec1742533\",                        [{\"mode\":\"lines+markers\",\"name\":\"Weekly Anxiety Survey\",\"visible\":true,\"x\":[\"2024-11-09T00:00:00\",\"2024-11-10T00:00:00\",\"2024-11-11T00:00:00\",\"2024-11-12T00:00:00\",\"2024-11-13T00:00:00\",\"2024-11-14T00:00:00\",\"2024-11-15T00:00:00\",\"2024-11-16T00:00:00\"],\"y\":[7,7,9,10,6,5,4,1],\"type\":\"scatter\"},{\"mode\":\"lines+markers\",\"name\":\"Weekly Depression Survey\",\"visible\":true,\"x\":[\"2024-11-09T00:00:00\",\"2024-11-10T00:00:00\",\"2024-11-11T00:00:00\",\"2024-11-12T00:00:00\",\"2024-11-13T00:00:00\",\"2024-11-14T00:00:00\",\"2024-11-15T00:00:00\",\"2024-11-16T00:00:00\"],\"y\":[9,13,11,10,5,3,6,3],\"type\":\"scatter\"},{\"mode\":\"lines+markers\",\"name\":\"Weekly Sleep Survey\",\"visible\":true,\"x\":[\"2024-11-09T00:00:00\",\"2024-11-10T00:00:00\",\"2024-11-11T00:00:00\",\"2024-11-12T00:00:00\",\"2024-11-13T00:00:00\",\"2024-11-14T00:00:00\",\"2024-11-15T00:00:00\",\"2024-11-16T00:00:00\"],\"y\":[19.0,26.0,23.0,19.0,null,17.0,16.0,16.0],\"type\":\"scatter\"}],                        {\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"type\":\"scattergl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"bgcolor\":\"#E5ECF6\",\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"#E5ECF6\",\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"subunitcolor\":\"white\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"white\"},\"title\":{\"x\":0.05},\"mapbox\":{\"style\":\"light\"}}},\"xaxis\":{\"title\":{\"text\":\"Date\"},\"showgrid\":true,\"tickangle\":45},\"yaxis\":{\"title\":{\"text\":\"Score\"},\"showgrid\":true,\"range\":[0,30]},\"title\":{\"text\":\"Weekly Survey Scores\"},\"showlegend\":true},                        {\"responsive\": true}                    ).then(function(){\n",
       "                            \n",
       "var gd = document.getElementById('012ab208-2433-4d4d-aa2f-936ec1742533');\n",
=======
       "<div>                            <div id=\"7b2e14ab-b1b9-4c06-b5d6-67299687b492\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                require([\"plotly\"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"7b2e14ab-b1b9-4c06-b5d6-67299687b492\")) {                    Plotly.newPlot(                        \"7b2e14ab-b1b9-4c06-b5d6-67299687b492\",                        [{\"mode\":\"lines+markers\",\"name\":\"Weekly Anxiety Survey\",\"visible\":true,\"x\":[\"2024-11-09T00:00:00\",\"2024-11-10T00:00:00\",\"2024-11-11T00:00:00\",\"2024-11-12T00:00:00\",\"2024-11-13T00:00:00\",\"2024-11-14T00:00:00\",\"2024-11-15T00:00:00\",\"2024-11-16T00:00:00\"],\"y\":[7,7,9,10,6,5,4,1],\"type\":\"scatter\"},{\"mode\":\"lines+markers\",\"name\":\"Weekly Depression Survey\",\"visible\":true,\"x\":[\"2024-11-09T00:00:00\",\"2024-11-10T00:00:00\",\"2024-11-11T00:00:00\",\"2024-11-12T00:00:00\",\"2024-11-13T00:00:00\",\"2024-11-14T00:00:00\",\"2024-11-15T00:00:00\",\"2024-11-16T00:00:00\"],\"y\":[9,13,11,10,5,3,6,3],\"type\":\"scatter\"},{\"mode\":\"lines+markers\",\"name\":\"Weekly Sleep Survey\",\"visible\":true,\"x\":[\"2024-11-09T00:00:00\",\"2024-11-10T00:00:00\",\"2024-11-11T00:00:00\",\"2024-11-12T00:00:00\",\"2024-11-13T00:00:00\",\"2024-11-14T00:00:00\",\"2024-11-15T00:00:00\",\"2024-11-16T00:00:00\"],\"y\":[19.0,26.0,23.0,19.0,null,17.0,16.0,16.0],\"type\":\"scatter\"}],                        {\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"type\":\"scattergl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"bgcolor\":\"#E5ECF6\",\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"#E5ECF6\",\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"subunitcolor\":\"white\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"white\"},\"title\":{\"x\":0.05},\"mapbox\":{\"style\":\"light\"}}},\"xaxis\":{\"title\":{\"text\":\"Date\"},\"showgrid\":true,\"tickangle\":45},\"yaxis\":{\"title\":{\"text\":\"Score\"},\"showgrid\":true,\"range\":[0,30]},\"title\":{\"text\":\"Weekly Survey Scores\"},\"showlegend\":true},                        {\"responsive\": true}                    ).then(function(){\n",
       "                            \n",
       "var gd = document.getElementById('7b2e14ab-b1b9-4c06-b5d6-67299687b492');\n",
>>>>>>> refs/remotes/origin/main
       "var x = new MutationObserver(function (mutations, observer) {{\n",
       "        var display = window.getComputedStyle(gd).display;\n",
       "        if (!display || display === 'none') {{\n",
       "            console.log([gd, 'removed!']);\n",
       "            Plotly.purge(gd);\n",
       "            observer.disconnect();\n",
       "        }}\n",
       "}});\n",
       "\n",
       "// Listen for the removal of the full notebook cells\n",
       "var notebookContainer = gd.closest('#notebook-container');\n",
       "if (notebookContainer) {{\n",
       "    x.observe(notebookContainer, {childList: true});\n",
       "}}\n",
       "\n",
       "// Listen for the clearing of the current output cell\n",
       "var outputEl = gd.closest('.output');\n",
       "if (outputEl) {{\n",
       "    x.observe(outputEl, {childList: true});\n",
       "}}\n",
       "\n",
       "                        })                };                });            </script>        </div>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import plotly.graph_objects as go\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "# Create Depression DataFrame from PHQ-9 scores\n",
    "dep_df = weekly_df[weekly_df['Survey'] == \"Weekly PHQ-9 Survey\"].copy()\n",
    "dep_df['Score'] = pd.to_numeric(dep_df['Score'], errors='coerce')  # Ensure 'Score' is numeric\n",
    "\n",
    "# Create Anxiety DataFrame from GAD-7 scores\n",
    "anx_df = weekly_df[weekly_df['Survey'] == \"Weekly GAD-7 Survey\"].copy()\n",
    "anx_df['Score'] = pd.to_numeric(anx_df['Score'], errors='coerce')  # Ensure 'Score' is numeric\n",
    "\n",
    "# Create Sleep DataFrame from sleep scores\n",
    "sleep_df = weekly_df[weekly_df['Survey'] == \"Weekly Sleep Survey\"].copy()\n",
    "sleep_df['Score'] = pd.to_numeric(sleep_df['Score'], errors='coerce')  # Ensure 'Score' is numeric\n",
    "\n",
    "\n",
    "# Convert 'Date' columns to datetime for compatibility with plotting\n",
    "dep_df['Date'] = pd.to_datetime(dep_df['Date'], errors='coerce')\n",
    "anx_df['Date'] = pd.to_datetime(anx_df['Date'], errors='coerce')\n",
    "sleep_df['Date'] = pd.to_datetime(sleep_df['Date'], errors='coerce')\n",
    "\n",
    "dep_df = dep_df.sort_values(by='Date').reset_index(drop=True)\n",
    "anx_df = anx_df.sort_values(by='Date').reset_index(drop=True)\n",
    "sleep_df = sleep_df.sort_values(by='Date').reset_index(drop=True)\n",
    "\n",
    "# Create the figure\n",
    "fig = go.Figure()\n",
    "\n",
    "# Add Anxiety data trace\n",
    "fig.add_trace(go.Scatter(\n",
    "    x=anx_df['Date'], \n",
    "    y=anx_df['Score'], \n",
    "    visible=True, \n",
    "    name='Weekly Anxiety Survey', \n",
    "    mode='lines+markers',\n",
    "))\n",
    "\n",
    "# Add Depression data trace\n",
    "fig.add_trace(go.Scatter(\n",
    "    x=dep_df['Date'], \n",
    "    y=dep_df['Score'], \n",
    "    visible=True, \n",
    "    name='Weekly Depression Survey', \n",
    "    mode='lines+markers',\n",
    "))\n",
    "\n",
    "# Add Sleep data trace\n",
    "fig.add_trace(go.Scatter(\n",
    "    x=sleep_df['Date'], \n",
    "    y=sleep_df['Score'], \n",
    "    visible=True, \n",
    "    name='Weekly Sleep Survey', \n",
    "    mode='lines+markers',\n",
    "))\n",
    "\n",
    "\n",
    "# Update the layout for the figure\n",
    "fig.update_layout(\n",
    "    title='Weekly Survey Scores', \n",
    "    xaxis_title='Date', \n",
    "    yaxis_title='Score',\n",
    "    xaxis=dict(\n",
    "        showgrid=True,\n",
    "        tickangle=45,\n",
    "    ),\n",
    "    yaxis=dict(\n",
    "        showgrid=True,\n",
    "        range=[0, 30],  # Adjusted range to accommodate potential PHQ-9, GAD-7, and SDS scores\n",
    "    ),\n",
    "    showlegend=True\n",
    ")\n",
    "\n",
    "# Show the figure\n",
    "fig.show()"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": null,
   "id": "de52fb18-99a1-46c8-9c60-77e3ddcbef52",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Could not retrieve notebook name.\n",
      "[NbConvertApp] Converting notebook DNreport_Dec2024.ipynb to html\n",
      "[NbConvertApp] WARNING | Alternative text is missing on 9 image(s).\n",
      "[NbConvertApp] Writing 588668 bytes to reports/MIND006_DNreport.html\n"
     ]
    }
   ],
   "source": [
    "# Set the notebook and output filename\n",
    "notebook_name=\"DNreport_Dec2024.ipynb\"\n",
    "output_filename = f\"{subjectid}_DNreport.html\"\n",
    "\n",
    "# Convert to html\n",
    "!jupyter nbconvert --to html --TemplateExporter.exclude_input=True {notebook_name} --output-dir=./reports --output={output_filename}"
=======
   "execution_count": 37,
   "id": "de52fb18-99a1-46c8-9c60-77e3ddcbef52",
   "metadata": {},
   "outputs": [],
   "source": [
    "output_filename = f\"{subjectid}_DNreport.html\"\n",
    "\n",
    "!jupyter nbconvert --to html --TemplateExporter.exclude_input=True TMLDNreport_v4.ipynb --output-dir=./reports --output={output_filename} > /dev/null 2>&1"
>>>>>>> refs/remotes/origin/main
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 36,
   "id": "2d1e1a13-f8ff-4e53-abb9-2b580b7af286",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
=======
   "execution_count": 35,
   "id": "2d1e1a13-f8ff-4e53-abb9-2b580b7af286",
   "metadata": {},
>>>>>>> refs/remotes/origin/main
   "outputs": [],
   "source": [
    "# %%capture\n",
    "\n",
    "#cortex.visualizations.participant.active(part, attach_graphs=True)\n",
    "#cortex.visualizations.participant.passive(part,attach_graphs=True)    \n",
    "#cortex.visualizations.participant.cortex_tertiles(part,attach_graphs=False)\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
<<<<<<< HEAD
   "display_name": ".venv",
=======
   "display_name": "Python 3 (ipykernel)",
>>>>>>> refs/remotes/origin/main
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
<<<<<<< HEAD
   "version": "3.8.10"
=======
   "version": "3.8.8"
>>>>>>> refs/remotes/origin/main
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
